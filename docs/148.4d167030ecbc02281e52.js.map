{"version":3,"file":"148.4d167030ecbc02281e52.js","mappings":";;;;;;;;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;ACT4C;AACqC;AACtC;AACpC,6BAA6B,sBAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,kCAAW;AAC7C,6BAA6B,kCAAW;AACxC,sFAAsF,kCAAe;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,+BAA+B,yDAAyD;AACxF;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,uBAAuB,0CAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0CAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,uBAAuB,0CAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gFAAgF,GAAG,2EAA2E,GAAG,oBAAoB;AACzN;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://mytonwallet/./node_modules/@capacitor-community/bluetooth-le/dist/esm/timeout.js","webpack://mytonwallet/./node_modules/@capacitor-community/bluetooth-le/dist/esm/web.js"],"sourcesContent":["export async function runWithTimeout(promise, time, exception) {\n    let timer;\n    return Promise.race([\n        promise,\n        new Promise((_, reject) => {\n            timer = setTimeout(() => reject(exception), time);\n        }),\n    ]).finally(() => clearTimeout(timer));\n}\n//# sourceMappingURL=timeout.js.map","import { WebPlugin } from '@capacitor/core';\nimport { hexStringToDataView, mapToObject, webUUIDToString } from './conversion';\nimport { runWithTimeout } from './timeout';\nexport class BluetoothLeWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.deviceMap = new Map();\n        this.discoveredDevices = new Map();\n        this.scan = null;\n        this.DEFAULT_CONNECTION_TIMEOUT = 10000;\n        this.onAdvertisementReceivedCallback = this.onAdvertisementReceived.bind(this);\n        this.onDisconnectedCallback = this.onDisconnected.bind(this);\n        this.onCharacteristicValueChangedCallback = this.onCharacteristicValueChanged.bind(this);\n    }\n    async initialize() {\n        if (typeof navigator === 'undefined' || !navigator.bluetooth) {\n            throw this.unavailable('Web Bluetooth API not available in this browser.');\n        }\n        const isAvailable = await navigator.bluetooth.getAvailability();\n        if (!isAvailable) {\n            throw this.unavailable('No Bluetooth radio available.');\n        }\n    }\n    async isEnabled() {\n        // not available on web\n        return { value: true };\n    }\n    async requestEnable() {\n        throw this.unavailable('requestEnable is not available on web.');\n    }\n    async enable() {\n        throw this.unavailable('enable is not available on web.');\n    }\n    async disable() {\n        throw this.unavailable('disable is not available on web.');\n    }\n    async startEnabledNotifications() {\n        // not available on web\n    }\n    async stopEnabledNotifications() {\n        // not available on web\n    }\n    async isLocationEnabled() {\n        throw this.unavailable('isLocationEnabled is not available on web.');\n    }\n    async openLocationSettings() {\n        throw this.unavailable('openLocationSettings is not available on web.');\n    }\n    async openBluetoothSettings() {\n        throw this.unavailable('openBluetoothSettings is not available on web.');\n    }\n    async openAppSettings() {\n        throw this.unavailable('openAppSettings is not available on web.');\n    }\n    async setDisplayStrings() {\n        // not available on web\n    }\n    async requestDevice(options) {\n        const filters = this.getFilters(options);\n        const device = await navigator.bluetooth.requestDevice({\n            filters: filters.length ? filters : undefined,\n            optionalServices: options === null || options === void 0 ? void 0 : options.optionalServices,\n            acceptAllDevices: filters.length === 0,\n        });\n        this.deviceMap.set(device.id, device);\n        const bleDevice = this.getBleDevice(device);\n        return bleDevice;\n    }\n    async requestLEScan(options) {\n        this.requestBleDeviceOptions = options;\n        const filters = this.getFilters(options);\n        await this.stopLEScan();\n        this.discoveredDevices = new Map();\n        navigator.bluetooth.removeEventListener('advertisementreceived', this.onAdvertisementReceivedCallback);\n        navigator.bluetooth.addEventListener('advertisementreceived', this.onAdvertisementReceivedCallback);\n        this.scan = await navigator.bluetooth.requestLEScan({\n            filters: filters.length ? filters : undefined,\n            acceptAllAdvertisements: filters.length === 0,\n            keepRepeatedDevices: options === null || options === void 0 ? void 0 : options.allowDuplicates,\n        });\n    }\n    onAdvertisementReceived(event) {\n        var _a, _b;\n        const deviceId = event.device.id;\n        this.deviceMap.set(deviceId, event.device);\n        const isNew = !this.discoveredDevices.has(deviceId);\n        if (isNew || ((_a = this.requestBleDeviceOptions) === null || _a === void 0 ? void 0 : _a.allowDuplicates)) {\n            this.discoveredDevices.set(deviceId, true);\n            const device = this.getBleDevice(event.device);\n            const result = {\n                device,\n                localName: device.name,\n                rssi: event.rssi,\n                txPower: event.txPower,\n                manufacturerData: mapToObject(event.manufacturerData),\n                serviceData: mapToObject(event.serviceData),\n                uuids: (_b = event.uuids) === null || _b === void 0 ? void 0 : _b.map(webUUIDToString),\n            };\n            this.notifyListeners('onScanResult', result);\n        }\n    }\n    async stopLEScan() {\n        var _a;\n        if ((_a = this.scan) === null || _a === void 0 ? void 0 : _a.active) {\n            this.scan.stop();\n        }\n        this.scan = null;\n    }\n    async getDevices(options) {\n        const devices = await navigator.bluetooth.getDevices();\n        const bleDevices = devices\n            .filter((device) => options.deviceIds.includes(device.id))\n            .map((device) => {\n            this.deviceMap.set(device.id, device);\n            const bleDevice = this.getBleDevice(device);\n            return bleDevice;\n        });\n        return { devices: bleDevices };\n    }\n    async getConnectedDevices(_options) {\n        const devices = await navigator.bluetooth.getDevices();\n        const bleDevices = devices\n            .filter((device) => {\n            var _a;\n            return (_a = device.gatt) === null || _a === void 0 ? void 0 : _a.connected;\n        })\n            .map((device) => {\n            this.deviceMap.set(device.id, device);\n            const bleDevice = this.getBleDevice(device);\n            return bleDevice;\n        });\n        return { devices: bleDevices };\n    }\n    async getBondedDevices() {\n        return {};\n    }\n    async connect(options) {\n        var _a, _b;\n        const device = this.getDeviceFromMap(options.deviceId);\n        device.removeEventListener('gattserverdisconnected', this.onDisconnectedCallback);\n        device.addEventListener('gattserverdisconnected', this.onDisconnectedCallback);\n        const timeoutError = Symbol();\n        if (device.gatt === undefined) {\n            throw new Error('No gatt server available.');\n        }\n        try {\n            const timeout = (_a = options.timeout) !== null && _a !== void 0 ? _a : this.DEFAULT_CONNECTION_TIMEOUT;\n            await runWithTimeout(device.gatt.connect(), timeout, timeoutError);\n        }\n        catch (error) {\n            // cancel pending connect call, does not work yet in chromium because of a bug:\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=684073\n            await ((_b = device.gatt) === null || _b === void 0 ? void 0 : _b.disconnect());\n            if (error === timeoutError) {\n                throw new Error('Connection timeout');\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n    onDisconnected(event) {\n        const deviceId = event.target.id;\n        const key = `disconnected|${deviceId}`;\n        this.notifyListeners(key, null);\n    }\n    async createBond(_options) {\n        throw this.unavailable('createBond is not available on web.');\n    }\n    async isBonded(_options) {\n        throw this.unavailable('isBonded is not available on web.');\n    }\n    async disconnect(options) {\n        var _a;\n        (_a = this.getDeviceFromMap(options.deviceId).gatt) === null || _a === void 0 ? void 0 : _a.disconnect();\n    }\n    async getServices(options) {\n        var _a, _b;\n        const services = (_b = (await ((_a = this.getDeviceFromMap(options.deviceId).gatt) === null || _a === void 0 ? void 0 : _a.getPrimaryServices()))) !== null && _b !== void 0 ? _b : [];\n        const bleServices = [];\n        for (const service of services) {\n            const characteristics = await service.getCharacteristics();\n            const bleCharacteristics = [];\n            for (const characteristic of characteristics) {\n                bleCharacteristics.push({\n                    uuid: characteristic.uuid,\n                    properties: this.getProperties(characteristic),\n                    descriptors: await this.getDescriptors(characteristic),\n                });\n            }\n            bleServices.push({ uuid: service.uuid, characteristics: bleCharacteristics });\n        }\n        return { services: bleServices };\n    }\n    async getDescriptors(characteristic) {\n        try {\n            const descriptors = await characteristic.getDescriptors();\n            return descriptors.map((descriptor) => ({\n                uuid: descriptor.uuid,\n            }));\n        }\n        catch (_a) {\n            return [];\n        }\n    }\n    getProperties(characteristic) {\n        return {\n            broadcast: characteristic.properties.broadcast,\n            read: characteristic.properties.read,\n            writeWithoutResponse: characteristic.properties.writeWithoutResponse,\n            write: characteristic.properties.write,\n            notify: characteristic.properties.notify,\n            indicate: characteristic.properties.indicate,\n            authenticatedSignedWrites: characteristic.properties.authenticatedSignedWrites,\n            reliableWrite: characteristic.properties.reliableWrite,\n            writableAuxiliaries: characteristic.properties.writableAuxiliaries,\n        };\n    }\n    async getCharacteristic(options) {\n        var _a;\n        const service = await ((_a = this.getDeviceFromMap(options.deviceId).gatt) === null || _a === void 0 ? void 0 : _a.getPrimaryService(options === null || options === void 0 ? void 0 : options.service));\n        return service === null || service === void 0 ? void 0 : service.getCharacteristic(options === null || options === void 0 ? void 0 : options.characteristic);\n    }\n    async getDescriptor(options) {\n        const characteristic = await this.getCharacteristic(options);\n        return characteristic === null || characteristic === void 0 ? void 0 : characteristic.getDescriptor(options === null || options === void 0 ? void 0 : options.descriptor);\n    }\n    async discoverServices(_options) {\n        throw this.unavailable('discoverServices is not available on web.');\n    }\n    async getMtu(_options) {\n        throw this.unavailable('getMtu is not available on web.');\n    }\n    async requestConnectionPriority(_options) {\n        throw this.unavailable('requestConnectionPriority is not available on web.');\n    }\n    async readRssi(_options) {\n        throw this.unavailable('readRssi is not available on web.');\n    }\n    async read(options) {\n        const characteristic = await this.getCharacteristic(options);\n        const value = await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.readValue());\n        return { value };\n    }\n    async write(options) {\n        const characteristic = await this.getCharacteristic(options);\n        let dataView;\n        if (typeof options.value === 'string') {\n            dataView = hexStringToDataView(options.value);\n        }\n        else {\n            dataView = options.value;\n        }\n        await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.writeValueWithResponse(dataView));\n    }\n    async writeWithoutResponse(options) {\n        const characteristic = await this.getCharacteristic(options);\n        let dataView;\n        if (typeof options.value === 'string') {\n            dataView = hexStringToDataView(options.value);\n        }\n        else {\n            dataView = options.value;\n        }\n        await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.writeValueWithoutResponse(dataView));\n    }\n    async readDescriptor(options) {\n        const descriptor = await this.getDescriptor(options);\n        const value = await (descriptor === null || descriptor === void 0 ? void 0 : descriptor.readValue());\n        return { value };\n    }\n    async writeDescriptor(options) {\n        const descriptor = await this.getDescriptor(options);\n        let dataView;\n        if (typeof options.value === 'string') {\n            dataView = hexStringToDataView(options.value);\n        }\n        else {\n            dataView = options.value;\n        }\n        await (descriptor === null || descriptor === void 0 ? void 0 : descriptor.writeValue(dataView));\n    }\n    async startNotifications(options) {\n        const characteristic = await this.getCharacteristic(options);\n        characteristic === null || characteristic === void 0 ? void 0 : characteristic.removeEventListener('characteristicvaluechanged', this.onCharacteristicValueChangedCallback);\n        characteristic === null || characteristic === void 0 ? void 0 : characteristic.addEventListener('characteristicvaluechanged', this.onCharacteristicValueChangedCallback);\n        await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.startNotifications());\n    }\n    onCharacteristicValueChanged(event) {\n        var _a, _b;\n        const characteristic = event.target;\n        const key = `notification|${(_a = characteristic.service) === null || _a === void 0 ? void 0 : _a.device.id}|${(_b = characteristic.service) === null || _b === void 0 ? void 0 : _b.uuid}|${characteristic.uuid}`;\n        this.notifyListeners(key, {\n            value: characteristic.value,\n        });\n    }\n    async stopNotifications(options) {\n        const characteristic = await this.getCharacteristic(options);\n        await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.stopNotifications());\n    }\n    getFilters(options) {\n        var _a;\n        const filters = [];\n        for (const service of (_a = options === null || options === void 0 ? void 0 : options.services) !== null && _a !== void 0 ? _a : []) {\n            filters.push({\n                services: [service],\n                name: options === null || options === void 0 ? void 0 : options.name,\n                namePrefix: options === null || options === void 0 ? void 0 : options.namePrefix,\n            });\n        }\n        if (((options === null || options === void 0 ? void 0 : options.name) || (options === null || options === void 0 ? void 0 : options.namePrefix)) && filters.length === 0) {\n            filters.push({\n                name: options.name,\n                namePrefix: options.namePrefix,\n            });\n        }\n        return filters;\n    }\n    getDeviceFromMap(deviceId) {\n        const device = this.deviceMap.get(deviceId);\n        if (device === undefined) {\n            throw new Error('Device not found. Call \"requestDevice\", \"requestLEScan\" or \"getDevices\" first.');\n        }\n        return device;\n    }\n    getBleDevice(device) {\n        var _a;\n        const bleDevice = {\n            deviceId: device.id,\n            // use undefined instead of null if name is not available\n            name: (_a = device.name) !== null && _a !== void 0 ? _a : undefined,\n        };\n        return bleDevice;\n    }\n}\n//# sourceMappingURL=web.js.map"],"names":[],"sourceRoot":""}