{"version":3,"file":"215.8c50e7e148f67437b2c7.js","mappings":";;;;;;;;;;;;AAA+E;AAClB;AACtD,gCAAgC,gEAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAsG,8DAAU;AAChH,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,aAAa;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yEAAkB,0DAA0D,oEAAa;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAgB;AAC3C,aAAa;AACb;AACA;AACA;AACA;AACA","sources":["webpack://mytonwallet/./node_modules/@capacitor-mlkit/barcode-scanning/dist/esm/web.js"],"sourcesContent":["import { CapacitorException, ExceptionCode, WebPlugin } from '@capacitor/core';\nimport { BarcodeValueType, LensFacing } from './definitions';\nexport class BarcodeScannerWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this._isSupported = 'BarcodeDetector' in window;\n        this.errorVideoElementMissing = 'videoElement must be provided.';\n        this.eventBarcodesScanned = 'barcodesScanned';\n    }\n    async startScan(options) {\n        if (!this._isSupported) {\n            throw this.createUnavailableException();\n        }\n        if (!(options === null || options === void 0 ? void 0 : options.videoElement)) {\n            throw new Error(this.errorVideoElementMissing);\n        }\n        this.videoElement = options.videoElement;\n        this.stream = await navigator.mediaDevices.getUserMedia({\n            video: {\n                facingMode: {\n                    ideal: (options === null || options === void 0 ? void 0 : options.lensFacing) === LensFacing.Front ? 'user' : 'environment',\n                },\n            },\n            audio: false,\n        });\n        options.videoElement.srcObject = this.stream;\n        await options.videoElement.play();\n        const barcodeDetector = new BarcodeDetector();\n        this.intervalId = window.setInterval(async () => {\n            if (!options.videoElement) {\n                return;\n            }\n            const barcodes = await barcodeDetector.detect(options.videoElement);\n            if (barcodes.length === 0) {\n                return;\n            }\n            else {\n                this.handleScannedBarcodes(barcodes);\n            }\n        }, 500);\n    }\n    async stopScan() {\n        if (!this._isSupported) {\n            throw this.createUnavailableException();\n        }\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n        }\n        if (this.stream) {\n            this.stream.getTracks().forEach(track => track.stop());\n            this.stream = undefined;\n        }\n        if (this.videoElement) {\n            this.videoElement.srcObject = null;\n            this.videoElement = undefined;\n        }\n    }\n    async readBarcodesFromImage(_options) {\n        throw this.createUnavailableException();\n    }\n    async scan() {\n        throw this.createUnavailableException();\n    }\n    async isSupported() {\n        return { supported: this._isSupported };\n    }\n    async enableTorch() {\n        throw this.createUnavailableException();\n    }\n    async disableTorch() {\n        throw this.createUnavailableException();\n    }\n    async toggleTorch() {\n        throw this.createUnavailableException();\n    }\n    async isTorchEnabled() {\n        throw this.createUnavailableException;\n    }\n    async isTorchAvailable() {\n        throw this.createUnavailableException();\n    }\n    async setZoomRatio(_options) {\n        throw this.createUnavailableException();\n    }\n    async getZoomRatio() {\n        throw this.createUnavailableException();\n    }\n    async getMinZoomRatio() {\n        throw this.createUnavailableException();\n    }\n    async getMaxZoomRatio() {\n        throw this.createUnavailableException();\n    }\n    async openSettings() {\n        throw this.createUnavailableException();\n    }\n    async isGoogleBarcodeScannerModuleAvailable() {\n        throw this.createUnavailableException();\n    }\n    async installGoogleBarcodeScannerModule() {\n        throw this.createUnavailableException();\n    }\n    async checkPermissions() {\n        try {\n            const result = await navigator.permissions.query({\n                name: 'camera',\n            });\n            return {\n                camera: result.state,\n            };\n        }\n        catch (error) {\n            return {\n                camera: 'prompt',\n            };\n        }\n    }\n    async requestPermissions() {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n            stream.getTracks().forEach(track => track.stop());\n            return {\n                camera: 'granted',\n            };\n        }\n        catch (error) {\n            return {\n                camera: 'denied',\n            };\n        }\n    }\n    createUnavailableException() {\n        return new CapacitorException('This plugin method is not available on this platform.', ExceptionCode.Unavailable);\n    }\n    handleScannedBarcodes(barcodes) {\n        const result = {\n            barcodes: barcodes.map(barcode => ({\n                cornerPoints: [\n                    [barcode.cornerPoints[0].x, barcode.cornerPoints[0].y],\n                    [barcode.cornerPoints[1].x, barcode.cornerPoints[1].y],\n                    [barcode.cornerPoints[2].x, barcode.cornerPoints[2].y],\n                    [barcode.cornerPoints[3].x, barcode.cornerPoints[3].y],\n                ],\n                displayValue: barcode.rawValue,\n                rawValue: barcode.rawValue,\n                format: barcode.format.toUpperCase(),\n                valueType: BarcodeValueType.Unknown,\n            })),\n        };\n        this.notifyListeners(this.eventBarcodesScanned, result);\n    }\n}\n//# sourceMappingURL=web.js.map"],"names":[],"sourceRoot":""}