{"version":3,"file":"803.4a4cfed8e6225ff4e320.js","mappings":"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","sources":["webpack://mytonwallet/./src/util/ledger/constants.ts","webpack://mytonwallet/./src/api/errors.ts","webpack://mytonwallet/./src/util/ledger/index.ts","webpack://mytonwallet/ignored|/home/zeta/connected/ton/mytonwallet/node_modules/tweetnacl|crypto"],"sourcesContent":["export type PossibleWalletVersion = 'v3R2' | 'v4R2';\n\nexport enum LedgerWalletVersion {\n  v3R2 = 'v3r2',\n  v4R2 = 'v4',\n}\n\nexport const INTERNAL_WORKCHAIN = 0; // workchain === -1 ? 255 : 0;\nexport const DEFAULT_WALLET_VERSION: PossibleWalletVersion = 'v4R2';\n\nexport const DEVICE_DETECT_ATTEMPTS = 3;\nexport const PAUSE = 125;\nexport const ATTEMPTS = 10;\nexport const IS_BOUNCEABLE = false;\n","import type { ApiAnyDisplayError } from './types';\nimport { ApiCommonError } from './types';\n\nexport class ApiBaseError extends Error {\n  constructor(message?: string, public displayError?: ApiAnyDisplayError) {\n    super(message);\n    this.name = this.constructor.name;\n  }\n}\n\nexport class ApiUserRejectsError extends ApiBaseError {\n  constructor(message: string = 'Canceled by the user') {\n    super(message);\n  }\n}\n\nexport class ApiServerError extends ApiBaseError {\n  constructor(message: string, public statusCode?: number) {\n    super(message, ApiCommonError.ServerError);\n  }\n}\n\nexport class AbortOperationError extends ApiBaseError {\n  constructor(message: string = 'Abort operation') {\n    super(message);\n  }\n}\n\nexport class NotImplemented extends ApiBaseError {\n  constructor(message: string = 'Not implemented') {\n    super(message);\n  }\n}\n\nexport function maybeApiErrors(fn: AnyAsyncFunction) {\n  return async (...args: any) => {\n    try {\n      return await fn(...args);\n    } catch (err) {\n      return handleServerError(err);\n    }\n  };\n}\n\nexport function handleServerError(err: any) {\n  if (err instanceof ApiServerError) {\n    return { error: err.displayError! };\n  }\n  throw err;\n}\n","import type Transport from '@ledgerhq/hw-transport';\nimport TransportWebHID from '@ledgerhq/hw-transport-webhid';\nimport TransportWebUSB from '@ledgerhq/hw-transport-webusb';\nimport type { HIDTransport } from '@mytonwallet/capacitor-usb-hid';\nimport { TonTransport } from '@ton-community/ton-ledger';\nimport type { ICapacitorUSBDevice } from '@mytonwallet/capacitor-usb-hid/dist/esm/definitions';\n\nimport type { ApiNetwork } from '../../api/types';\nimport type BleTransport from '../../lib/ledger-hw-transport-ble/BleTransport';\nimport type { PossibleWalletVersion } from './constants';\nimport type { LedgerTransport, LedgerWalletInfo } from './types';\n\nimport { IS_CAPACITOR } from '../../config';\nimport { callApi } from '../../api';\nimport { WALLET_IS_BOUNCEABLE } from '../../api/chains/ton/constants';\nimport { handleServerError } from '../../api/errors';\nimport { parseAccountId } from '../account';\nimport { logDebug, logDebugError } from '../logs';\nimport { pause } from '../schedulers';\nimport { IS_ANDROID_APP } from '../windowEnvironment';\nimport {\n  ATTEMPTS,\n  DEFAULT_WALLET_VERSION,\n  DEVICE_DETECT_ATTEMPTS,\n  INTERNAL_WORKCHAIN,\n  IS_BOUNCEABLE,\n  PAUSE,\n} from './constants';\nimport { LedgerWalletVersion } from './constants';\nimport { getLedgerAccountPathByIndex, getLedgerAccountPathByWallet, isLedgerConnectionBroken } from './utils';\n\ntype BleConnectorClass = typeof import('./bleConnector').BleConnector;\ntype HIDTransportClass = typeof import('@mytonwallet/capacitor-usb-hid/dist/esm').HIDTransport;\ntype ListLedgerDevicesFunction = typeof import('@mytonwallet/capacitor-usb-hid/dist/esm').listLedgerDevices;\n\nlet transport: TransportWebHID | TransportWebUSB | BleTransport | HIDTransport | undefined;\nlet tonTransport: TonTransport | undefined;\nlet transportSupport: {\n  hid: boolean;\n  webUsb: boolean;\n  bluetooth: boolean;\n} | undefined;\nlet currentLedgerTransport: LedgerTransport | undefined;\n\nlet hidImportPromise: Promise<{\n  transport: HIDTransportClass;\n  listLedgerDevices: ListLedgerDevicesFunction;\n}> | undefined;\nlet bleImportPromise: Promise<BleConnectorClass> | undefined;\nlet BleConnector: BleConnectorClass;\nlet MtwHidTransport: HIDTransportClass;\nlet listLedgerDevices: ListLedgerDevicesFunction;\n\nasync function ensureBleConnector() {\n  if (!IS_CAPACITOR) return undefined;\n\n  if (!bleImportPromise) {\n    bleImportPromise = import('./bleConnector').then((module) => {\n      return module.BleConnector;\n    });\n    BleConnector = await bleImportPromise;\n  }\n\n  return bleImportPromise;\n}\n\nasync function ensureHidTransport() {\n  if (!IS_ANDROID_APP) return undefined;\n\n  if (!hidImportPromise) {\n    hidImportPromise = import('@mytonwallet/capacitor-usb-hid/dist/esm').then((module) => {\n      return {\n        transport: module.HIDTransport,\n        listLedgerDevices: module.listLedgerDevices,\n      };\n    });\n    const result = await hidImportPromise;\n    MtwHidTransport = result.transport;\n    listLedgerDevices = result.listLedgerDevices;\n  }\n\n  return hidImportPromise;\n}\n\nvoid ensureBleConnector();\nvoid ensureHidTransport();\n\nexport async function detectAvailableTransports() {\n  await ensureBleConnector();\n  await ensureHidTransport();\n  const [hid, bluetooth, webUsb] = await Promise.all([\n    IS_ANDROID_APP ? MtwHidTransport.isSupported() : TransportWebHID.isSupported(),\n    BleConnector ? BleConnector.isSupported() : false,\n    TransportWebUSB.isSupported(),\n  ]);\n\n  logDebug('LEDGER TRANSPORTS', { hid, bluetooth, webUsb });\n\n  transportSupport = { hid, bluetooth, webUsb };\n\n  return {\n    isUsbAvailable: hid || webUsb,\n    isBluetoothAvailable: bluetooth,\n  };\n}\n\nexport async function hasUsbDevice() {\n  const support = await getTransportSupport();\n\n  if (support.hid) {\n    return IS_ANDROID_APP\n      ? await hasCapacitorHIDDevice()\n      : await hasWebHIDDevice();\n  }\n\n  if (support.webUsb) {\n    return await hasWebUsbDevice();\n  }\n\n  return false;\n}\n\nfunction getInternalWalletVersion(version: PossibleWalletVersion) {\n  return LedgerWalletVersion[version];\n}\n\nexport async function importLedgerWallet(network: ApiNetwork, accountIndex: number) {\n  const walletInfo = await getLedgerWalletInfo(network, accountIndex);\n  return callApi('importLedgerWallet', network, walletInfo);\n}\n\nexport function openSystemBluetoothSettings() {\n  if (!BleConnector) return;\n  void BleConnector.openSettings();\n}\n\nexport async function reconnectLedger() {\n  try {\n    if (await tonTransport?.isAppOpen()) {\n      return true;\n    }\n  } catch {\n    // Do nothing\n  }\n\n  const isLedgerConnected = await connectLedger();\n  if (!isLedgerConnected) return false;\n\n  try {\n    return await waitLedgerTonApp();\n  } catch (err: any) {\n    if (isLedgerConnectionBroken(err.name)) {\n      return reconnectLedger();\n    }\n\n    throw err;\n  }\n}\n\nexport async function connectLedger(preferredTransport?: LedgerTransport) {\n  const support = await getTransportSupport();\n\n  if (preferredTransport) currentLedgerTransport = preferredTransport;\n\n  try {\n    switch (currentLedgerTransport) {\n      case 'bluetooth':\n        transport = await connectBLE();\n        break;\n\n      case 'usb':\n      default:\n        if (support.hid) {\n          transport = await connectHID();\n        } else if (support.webUsb) {\n          transport = await connectWebUsb();\n        }\n        break;\n    }\n\n    if (!transport) {\n      logDebugError('connectLedger: BLE and/or HID are not supported');\n      return false;\n    }\n\n    tonTransport = new TonTransport(transport);\n    return true;\n  } catch (err) {\n    logDebugError('connectLedger', err);\n    return false;\n  }\n}\n\nasync function waitLedgerTonAppDeadline(): Promise<boolean> {\n  await pause(PAUSE * ATTEMPTS);\n  return false;\n}\n\nasync function checkTonApp() {\n  for (let i = 0; i < ATTEMPTS; i++) {\n    try {\n      const isTonOpen = await tonTransport?.isAppOpen();\n\n      if (isTonOpen) {\n        if (transport?.deviceModel?.id.startsWith('nanoS')) {\n          // Workaround for Ledger Nano S or Nano S Plus, this is a way to check if it is unlocked.\n          // There will be an error with code 0x530c.\n          await tonTransport?.getAddress(getLedgerAccountPathByIndex(0, false), {\n            walletVersion: LedgerWalletVersion[DEFAULT_WALLET_VERSION],\n          });\n        }\n\n        return true;\n      }\n    } catch (err: any) {\n      if (isLedgerConnectionBroken(err.name)) {\n        tonTransport = undefined;\n        throw err;\n      }\n      if (!err?.message.includes('0x530c')) {\n        logDebugError('waitLedgerTonApp', err);\n      }\n    }\n\n    await pause(PAUSE);\n  }\n\n  return false;\n}\n\nexport function waitLedgerTonApp() {\n  return Promise.race([\n    checkTonApp(),\n    waitLedgerTonAppDeadline(),\n  ]);\n}\n\nfunction connectHID() {\n  if (IS_ANDROID_APP) {\n    return connectCapacitorHID();\n  }\n\n  return connectWebHID();\n}\n\nasync function connectWebHID() {\n  for (let i = 0; i < ATTEMPTS; i++) {\n    const [device] = await TransportWebHID.list();\n\n    if (!device) {\n      await TransportWebHID.create();\n      await pause(PAUSE);\n      continue;\n    }\n\n    if (device.opened) {\n      return new TransportWebHID(device);\n    } else {\n      return TransportWebHID.open(device);\n    }\n  }\n\n  throw new Error('Failed to connect');\n}\n\nasync function connectWebUsb() {\n  for (let i = 0; i < ATTEMPTS; i++) {\n    const [device] = await TransportWebUSB.list();\n\n    if (!device) {\n      await TransportWebUSB.create();\n      await pause(PAUSE);\n      continue;\n    }\n\n    if (device.opened) {\n      return (await TransportWebUSB.openConnected()) ?? (await TransportWebUSB.request());\n    } else {\n      return TransportWebUSB.open(device);\n    }\n  }\n\n  throw new Error('Failed to connect');\n}\n\nasync function connectCapacitorHID(): Promise<HIDTransport> {\n  for (let i = 0; i < ATTEMPTS; i++) {\n    const [device] = await listLedgerDevices();\n\n    if (!device) {\n      await pause(PAUSE);\n      continue;\n    }\n\n    try {\n      return await Promise.race([\n        MtwHidTransport.open(device),\n        new Promise<never>((_, reject) => {\n          setTimeout(() => reject(new Error()), 1000);\n        }),\n      ]);\n    } catch (error) {\n      await pause(PAUSE);\n    }\n  }\n\n  throw new Error('Failed to connect');\n}\n\nasync function connectBLE(): Promise<BleTransport> {\n  if (!BleConnector) {\n    throw new Error('BLE is not supported on this device.');\n  }\n\n  const connection = await BleConnector.connect();\n  return connection.bleTransport;\n}\n\nexport async function getNextLedgerWallets(\n  network: ApiNetwork,\n  lastExistingIndex = -1,\n  alreadyImportedAddresses: string[] = [],\n) {\n  const result: LedgerWalletInfo[] = [];\n  let index = lastExistingIndex + 1;\n\n  try {\n    while (true) {\n      const walletInfo = await getLedgerWalletInfo(network, index);\n\n      if (alreadyImportedAddresses.includes(walletInfo.address)) {\n        index += 1;\n        continue;\n      }\n\n      if (walletInfo.balance !== 0n) {\n        result.push(walletInfo);\n        index += 1;\n        continue;\n      }\n\n      if (!result.length) {\n        result.push(walletInfo);\n      }\n\n      return result;\n    }\n  } catch (err) {\n    return handleServerError(err);\n  }\n}\n\nasync function getLedgerWalletInfo(network: ApiNetwork, accountIndex: number): Promise<LedgerWalletInfo> {\n  const isTestnet = network === 'testnet';\n  const { address, publicKey } = await getLedgerWalletAddress(accountIndex, isTestnet);\n  const balance = (await callApi('getWalletBalance', 'ton', network, address))!;\n\n  return {\n    index: accountIndex,\n    address,\n    publicKey: publicKey.toString('hex'),\n    balance,\n    version: DEFAULT_WALLET_VERSION,\n    driver: 'HID',\n    deviceId: transport!.deviceModel?.id,\n    deviceName: transport!.deviceModel?.productName,\n  };\n}\n\nfunction getLedgerWalletAddress(index: number, isTestnet: boolean) {\n  const path = getLedgerAccountPathByIndex(index, isTestnet);\n\n  return tonTransport!.getAddress(path, {\n    testOnly: isTestnet,\n    chain: INTERNAL_WORKCHAIN,\n    bounceable: WALLET_IS_BOUNCEABLE,\n    walletVersion: LedgerWalletVersion[DEFAULT_WALLET_VERSION],\n  });\n}\n\nexport async function verifyAddress(accountId: string) {\n  const account = await callApi('fetchLedgerAccount', accountId);\n  const path = getLedgerAccountPathByWallet(parseAccountId(accountId).network, account!.ton);\n\n  await tonTransport!.validateAddress(path, {\n    bounceable: IS_BOUNCEABLE,\n    walletVersion: getInternalWalletVersion(account!.ton.version as PossibleWalletVersion),\n  });\n}\n\nasync function tryDetectDevice(\n  listDeviceFn: () => Promise<ICapacitorUSBDevice[]>,\n  createTransportFn?: () => Promise<unknown> | void,\n) {\n  try {\n    for (let i = 0; i < DEVICE_DETECT_ATTEMPTS; i++) {\n      const [device] = await listDeviceFn();\n      if (!device) {\n        if (createTransportFn) await createTransportFn();\n        await pause(PAUSE);\n        continue;\n      }\n\n      return true;\n    }\n  } catch (err: any) {\n    logDebugError('tryDetectDevice', err);\n  }\n\n  return false;\n}\n\nfunction hasWebHIDDevice() {\n  return tryDetectDevice(() => TransportWebHID.list(), () => TransportWebHID.create());\n}\nfunction hasWebUsbDevice() {\n  return tryDetectDevice(() => TransportWebUSB.list(), () => TransportWebUSB.create());\n}\nfunction hasCapacitorHIDDevice() {\n  return tryDetectDevice(listLedgerDevices);\n}\n\nasync function getTransportSupport() {\n  // Ensure transports support is detected lazily if missing\n  if (!transportSupport) {\n    await detectAvailableTransports();\n  }\n\n  return transportSupport!;\n}\n\nexport function getTransport(): Transport | undefined {\n  return transport;\n}\n","/* (ignored) */"],"names":["LedgerWalletVersion","INTERNAL_WORKCHAIN","DEFAULT_WALLET_VERSION","DEVICE_DETECT_ATTEMPTS","PAUSE","ATTEMPTS","IS_BOUNCEABLE","ApiCommonError","ApiBaseError","Error","constructor","message","displayError","name","ApiUserRejectsError","arguments","length","undefined","ApiServerError","statusCode","ServerError","AbortOperationError","NotImplemented","maybeApiErrors","fn","err","handleServerError","error","TransportWebHID","TransportWebUSB","TonTransport","IS_CAPACITOR","callApi","WALLET_IS_BOUNCEABLE","parseAccountId","logDebug","logDebugError","pause","IS_ANDROID_APP","getLedgerAccountPathByIndex","getLedgerAccountPathByWallet","isLedgerConnectionBroken","transport","tonTransport","transportSupport","currentLedgerTransport","hidImportPromise","bleImportPromise","BleConnector","MtwHidTransport","listLedgerDevices","ensureBleConnector","then","module","ensureHidTransport","HIDTransport","result","detectAvailableTransports","hid","bluetooth","webUsb","Promise","all","isSupported","isUsbAvailable","isBluetoothAvailable","hasUsbDevice","support","getTransportSupport","hasCapacitorHIDDevice","hasWebHIDDevice","hasWebUsbDevice","getInternalWalletVersion","version","importLedgerWallet","network","accountIndex","walletInfo","getLedgerWalletInfo","openSystemBluetoothSettings","openSettings","reconnectLedger","_tonTransport","isAppOpen","isLedgerConnected","connectLedger","waitLedgerTonApp","preferredTransport","connectBLE","connectHID","connectWebUsb","waitLedgerTonAppDeadline","checkTonApp","i","_tonTransport2","isTonOpen","_transport","deviceModel","id","startsWith","_tonTransport3","getAddress","walletVersion","includes","race","connectCapacitorHID","connectWebHID","device","list","create","opened","open","openConnected","request","_","reject","setTimeout","connection","connect","bleTransport","getNextLedgerWallets","lastExistingIndex","alreadyImportedAddresses","index","address","balance","push","_deviceModel","_deviceModel2","isTestnet","publicKey","getLedgerWalletAddress","toString","driver","deviceId","deviceName","productName","path","testOnly","chain","bounceable","verifyAddress","accountId","account","ton","validateAddress","tryDetectDevice","listDeviceFn","createTransportFn","getTransport"],"sourceRoot":""}