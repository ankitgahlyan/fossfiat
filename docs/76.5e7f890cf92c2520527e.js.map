{"version":3,"file":"76.5e7f890cf92c2520527e.js","mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,iBAAiB,+BAA+B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC5IA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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AsB;AAC7C,qBAAqB,sBAAsB;AAC3C,yBAAyB,sBAAsB;AAC/C,oBAAoB,sBAAsB;AAC1C,mBAAmB,sBAAsB;AACzC,yBAAyB,sBAAsB;AAC/C,kBAAkB,sBAAsB;AACxC,sBAAsB,sBAAsB;AAC5C,2BAA2B,sBAAsB;AACjD,2BAA2B,sBAAsB;AACjD,qBAAqB,sBAAsB;AAC3C,qBAAqB,sBAAsB;AAC3C,oCAAoC,sBAAsB;AACjE;AACO,0CAA0C,sBAAsB;AACvE;AACO,8BAA8B,sBAAsB;AACpD,kBAAkB,sBAAsB;AAC/C;AACO,yBAAyB,sBAAsB;AACtD;AACO,sBAAsB,sBAAsB;AAC5C,wBAAwB,sBAAsB;AAC9C,mBAAmB,sBAAsB;AACzC,4BAA4B,sBAAsB;AAClD,0CAA0C,sBAAsB;AACvE;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AACnB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iCAAiC,IAAI;AACnE;AACA;AACA;AACA,0CAA0C,MAAM,KAAK,cAAc;AACnE;AACA;AACA;AACA;A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","sources":["webpack://mytonwallet/./node_modules/@ledgerhq/logs/lib-es/index.js","webpack://mytonwallet/./node_modules/@ledgerhq/errors/lib-es/helpers.js","webpack://mytonwallet/./node_modules/@ledgerhq/errors/lib-es/index.js","webpack://mytonwallet/./node_modules/@ton-community/ton-ledger/dist/index.js","webpack://mytonwallet/./src/util/compareVersions.ts","webpack://mytonwallet/./src/util/ledger/utils.ts","webpack://mytonwallet/./src/api/common/ledger.ts","webpack://mytonwallet/./src/api/chains/ton/util/ledger.ts"],"sourcesContent":["let id = 0;\nconst subscribers = [];\n/**\n * Logs something\n *\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\nexport const log = (type, message, data) => {\n    const obj = {\n        type,\n        id: String(++id),\n        date: new Date(),\n    };\n    if (message)\n        obj.message = message;\n    if (data)\n        obj.data = data;\n    dispatch(obj);\n};\n/**\n * A simple tracer function, only expanding the existing log function\n *\n * Its goal is to capture more context than a log function.\n * This is simple for now, but can be improved later.\n *\n * @param context Anything representing the context where the log occurred\n */\nexport const trace = ({ type, message, data, context, }) => {\n    const obj = {\n        type,\n        id: String(++id),\n        date: new Date(),\n    };\n    if (message)\n        obj.message = message;\n    if (data)\n        obj.data = data;\n    if (context)\n        obj.context = context;\n    dispatch(obj);\n};\n/**\n * A simple tracer class, that can be used to avoid repetition when using the `trace` function\n *\n * Its goal is to capture more context than a log function.\n * This is simple for now, but can be improved later.\n *\n * @param type A given type (not level) for the current local tracer (\"hw\", \"withDevice\", etc.)\n * @param context Anything representing the context where the log occurred\n */\nexport class LocalTracer {\n    constructor(type, context) {\n        this.type = type;\n        this.context = context;\n    }\n    trace(message, data) {\n        trace({\n            type: this.type,\n            message,\n            data,\n            context: this.context,\n        });\n    }\n    getContext() {\n        return this.context;\n    }\n    setContext(context) {\n        this.context = context;\n    }\n    updateContext(contextToAdd) {\n        this.context = Object.assign(Object.assign({}, this.context), contextToAdd);\n    }\n    getType() {\n        return this.type;\n    }\n    setType(type) {\n        this.type = type;\n    }\n    /**\n     * Create a new instance of the LocalTracer with an updated `type`\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     */\n    withType(type) {\n        return new LocalTracer(type, this.context);\n    }\n    /**\n     * Create a new instance of the LocalTracer with a new `context`\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     *\n     * @param context A TraceContext, that can undefined to reset the context\n     */\n    withContext(context) {\n        return new LocalTracer(this.type, context);\n    }\n    /**\n     * Create a new instance of the LocalTracer with an updated `context`,\n     * on which an additional context is merged with the existing one.\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     */\n    withUpdatedContext(contextToAdd) {\n        return new LocalTracer(this.type, Object.assign(Object.assign({}, this.context), contextToAdd));\n    }\n}\n/**\n * Adds a subscribers to the emitted logs.\n *\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\nexport const listen = (cb) => {\n    subscribers.push(cb);\n    return () => {\n        const i = subscribers.indexOf(cb);\n        if (i !== -1) {\n            // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n            subscribers[i] = subscribers[subscribers.length - 1];\n            subscribers.pop();\n        }\n    };\n};\nfunction dispatch(log) {\n    for (let i = 0; i < subscribers.length; i++) {\n        try {\n            subscribers[i](log);\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n}\nif (typeof window !== \"undefined\") {\n    window.__ledgerLogsListen = listen;\n}\n//# sourceMappingURL=index.js.map","/* eslint-disable no-continue */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-prototype-builtins */\nconst errorClasses = {};\nconst deserializers = {};\nexport const addCustomErrorDeserializer = (name, deserializer) => {\n    deserializers[name] = deserializer;\n};\nexport const createCustomErrorClass = (name) => {\n    class CustomErrorClass extends Error {\n        constructor(message, fields, options) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            super(message || name, options);\n            // Set the prototype explicitly. See https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n            Object.setPrototypeOf(this, CustomErrorClass.prototype);\n            this.name = name;\n            if (fields) {\n                for (const k in fields) {\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    this[k] = fields[k];\n                }\n            }\n            if (options && isObject(options) && \"cause\" in options && !(\"cause\" in this)) {\n                // .cause was specified but the superconstructor\n                // did not create an instance property.\n                const cause = options.cause;\n                this.cause = cause;\n                if (\"stack\" in cause) {\n                    this.stack = this.stack + \"\\nCAUSE: \" + cause.stack;\n                }\n            }\n        }\n    }\n    errorClasses[name] = CustomErrorClass;\n    return CustomErrorClass;\n};\nfunction isObject(value) {\n    return typeof value === \"object\";\n}\n// inspired from https://github.com/programble/errio/blob/master/index.js\nexport const deserializeError = (object) => {\n    if (object && typeof object === \"object\") {\n        try {\n            if (typeof object.message === \"string\") {\n                const msg = JSON.parse(object.message);\n                if (msg.message && msg.name) {\n                    object = msg;\n                }\n            }\n        }\n        catch (e) {\n            // nothing\n        }\n        let error;\n        if (typeof object.name === \"string\") {\n            const { name } = object;\n            const des = deserializers[name];\n            if (des) {\n                error = des(object);\n            }\n            else {\n                let constructor = name === \"Error\" ? Error : errorClasses[name];\n                if (!constructor) {\n                    console.warn(\"deserializing an unknown class '\" + name + \"'\");\n                    constructor = createCustomErrorClass(name);\n                }\n                error = Object.create(constructor.prototype);\n                try {\n                    for (const prop in object) {\n                        if (object.hasOwnProperty(prop)) {\n                            error[prop] = object[prop];\n                        }\n                    }\n                }\n                catch (e) {\n                    // sometimes setting a property can fail (e.g. .name)\n                }\n            }\n        }\n        else {\n            if (typeof object.message === \"string\") {\n                error = new Error(object.message);\n            }\n        }\n        if (error && !error.stack && Error.captureStackTrace) {\n            Error.captureStackTrace(error, deserializeError);\n        }\n        return error;\n    }\n    return new Error(String(object));\n};\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\nexport const serializeError = (value) => {\n    if (!value)\n        return value;\n    if (typeof value === \"object\") {\n        return destroyCircular(value, []);\n    }\n    if (typeof value === \"function\") {\n        return `[Function: ${value.name || \"anonymous\"}]`;\n    }\n    return value;\n};\n// https://www.npmjs.com/package/destroy-circular\nfunction destroyCircular(from, seen) {\n    const to = {};\n    seen.push(from);\n    for (const key of Object.keys(from)) {\n        const value = from[key];\n        if (typeof value === \"function\") {\n            continue;\n        }\n        if (!value || typeof value !== \"object\") {\n            to[key] = value;\n            continue;\n        }\n        if (seen.indexOf(from[key]) === -1) {\n            to[key] = destroyCircular(from[key], seen.slice(0));\n            continue;\n        }\n        to[key] = \"[Circular]\";\n    }\n    if (typeof from.name === \"string\") {\n        to.name = from.name;\n    }\n    if (typeof from.message === \"string\") {\n        to.message = from.message;\n    }\n    if (typeof from.stack === \"string\") {\n        to.stack = from.stack;\n    }\n    return to;\n}\n//# sourceMappingURL=helpers.js.map","import { serializeError, deserializeError, createCustomErrorClass, addCustomErrorDeserializer, } from \"./helpers\";\nexport { serializeError, deserializeError, createCustomErrorClass, addCustomErrorDeserializer };\nexport const AccountNameRequiredError = createCustomErrorClass(\"AccountNameRequired\");\nexport const AccountNotSupported = createCustomErrorClass(\"AccountNotSupported\");\nexport const AccountAwaitingSendPendingOperations = createCustomErrorClass(\"AccountAwaitingSendPendingOperations\");\nexport const AmountRequired = createCustomErrorClass(\"AmountRequired\");\nexport const BluetoothRequired = createCustomErrorClass(\"BluetoothRequired\");\nexport const BtcUnmatchedApp = createCustomErrorClass(\"BtcUnmatchedApp\");\nexport const CantOpenDevice = createCustomErrorClass(\"CantOpenDevice\");\nexport const CashAddrNotSupported = createCustomErrorClass(\"CashAddrNotSupported\");\nexport const ClaimRewardsFeesWarning = createCustomErrorClass(\"ClaimRewardsFeesWarning\");\nexport const CurrencyNotSupported = createCustomErrorClass(\"CurrencyNotSupported\");\nexport const DeviceAppVerifyNotSupported = createCustomErrorClass(\"DeviceAppVerifyNotSupported\");\nexport const DeviceGenuineSocketEarlyClose = createCustomErrorClass(\"DeviceGenuineSocketEarlyClose\");\nexport const DeviceNotGenuineError = createCustomErrorClass(\"DeviceNotGenuine\");\nexport const DeviceOnDashboardExpected = createCustomErrorClass(\"DeviceOnDashboardExpected\");\nexport const DeviceOnDashboardUnexpected = createCustomErrorClass(\"DeviceOnDashboardUnexpected\");\nexport const DeviceInOSUExpected = createCustomErrorClass(\"DeviceInOSUExpected\");\nexport const DeviceHalted = createCustomErrorClass(\"DeviceHalted\");\nexport const DeviceNameInvalid = createCustomErrorClass(\"DeviceNameInvalid\");\nexport const DeviceSocketFail = createCustomErrorClass(\"DeviceSocketFail\");\nexport const DeviceSocketNoBulkStatus = createCustomErrorClass(\"DeviceSocketNoBulkStatus\");\nexport const DeviceNeedsRestart = createCustomErrorClass(\"DeviceSocketNoBulkStatus\");\nexport const UnresponsiveDeviceError = createCustomErrorClass(\"UnresponsiveDeviceError\");\nexport const DisconnectedDevice = createCustomErrorClass(\"DisconnectedDevice\");\nexport const DisconnectedDeviceDuringOperation = createCustomErrorClass(\"DisconnectedDeviceDuringOperation\");\nexport const DeviceExtractOnboardingStateError = createCustomErrorClass(\"DeviceExtractOnboardingStateError\");\nexport const DeviceOnboardingStatePollingError = createCustomErrorClass(\"DeviceOnboardingStatePollingError\");\nexport const EnpointConfigError = createCustomErrorClass(\"EnpointConfig\");\nexport const EthAppPleaseEnableContractData = createCustomErrorClass(\"EthAppPleaseEnableContractData\");\nexport const FeeEstimationFailed = createCustomErrorClass(\"FeeEstimationFailed\");\nexport const FirmwareNotRecognized = createCustomErrorClass(\"FirmwareNotRecognized\");\nexport const HardResetFail = createCustomErrorClass(\"HardResetFail\");\nexport const InvalidXRPTag = createCustomErrorClass(\"InvalidXRPTag\");\nexport const InvalidAddress = createCustomErrorClass(\"InvalidAddress\");\nexport const InvalidNonce = createCustomErrorClass(\"InvalidNonce\");\nexport const InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass(\"InvalidAddressBecauseDestinationIsAlsoSource\");\nexport const LatestMCUInstalledError = createCustomErrorClass(\"LatestMCUInstalledError\");\nexport const UnknownMCU = createCustomErrorClass(\"UnknownMCU\");\nexport const LedgerAPIError = createCustomErrorClass(\"LedgerAPIError\");\nexport const LedgerAPIErrorWithMessage = createCustomErrorClass(\"LedgerAPIErrorWithMessage\");\nexport const LedgerAPINotAvailable = createCustomErrorClass(\"LedgerAPINotAvailable\");\nexport const ManagerAppAlreadyInstalledError = createCustomErrorClass(\"ManagerAppAlreadyInstalled\");\nexport const ManagerAppRelyOnBTCError = createCustomErrorClass(\"ManagerAppRelyOnBTC\");\nexport const ManagerAppDepInstallRequired = createCustomErrorClass(\"ManagerAppDepInstallRequired\");\nexport const ManagerAppDepUninstallRequired = createCustomErrorClass(\"ManagerAppDepUninstallRequired\");\nexport const ManagerDeviceLockedError = createCustomErrorClass(\"ManagerDeviceLocked\");\nexport const ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass(\"ManagerFirmwareNotEnoughSpace\");\nexport const ManagerNotEnoughSpaceError = createCustomErrorClass(\"ManagerNotEnoughSpace\");\nexport const ManagerUninstallBTCDep = createCustomErrorClass(\"ManagerUninstallBTCDep\");\nexport const NetworkDown = createCustomErrorClass(\"NetworkDown\");\nexport const NetworkError = createCustomErrorClass(\"NetworkError\");\nexport const NoAddressesFound = createCustomErrorClass(\"NoAddressesFound\");\nexport const NotEnoughBalance = createCustomErrorClass(\"NotEnoughBalance\");\nexport const NotEnoughBalanceSwap = createCustomErrorClass(\"NotEnoughBalanceSwap\");\nexport const NotEnoughBalanceToDelegate = createCustomErrorClass(\"NotEnoughBalanceToDelegate\");\nexport const NotEnoughBalanceInParentAccount = createCustomErrorClass(\"NotEnoughBalanceInParentAccount\");\nexport const NotEnoughSpendableBalance = createCustomErrorClass(\"NotEnoughSpendableBalance\");\nexport const NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass(\"NotEnoughBalanceBecauseDestinationNotCreated\");\nexport const NoAccessToCamera = createCustomErrorClass(\"NoAccessToCamera\");\nexport const NotEnoughGas = createCustomErrorClass(\"NotEnoughGas\");\n// Error message specifically for the PTX swap flow\nexport const NotEnoughGasSwap = createCustomErrorClass(\"NotEnoughGasSwap\");\nexport const TronEmptyAccount = createCustomErrorClass(\"TronEmptyAccount\");\nexport const MaybeKeepTronAccountAlive = createCustomErrorClass(\"MaybeKeepTronAccountAlive\");\nexport const NotSupportedLegacyAddress = createCustomErrorClass(\"NotSupportedLegacyAddress\");\nexport const GasLessThanEstimate = createCustomErrorClass(\"GasLessThanEstimate\");\nexport const PriorityFeeTooLow = createCustomErrorClass(\"PriorityFeeTooLow\");\nexport const PriorityFeeTooHigh = createCustomErrorClass(\"PriorityFeeTooHigh\");\nexport const PriorityFeeHigherThanMaxFee = createCustomErrorClass(\"PriorityFeeHigherThanMaxFee\");\nexport const MaxFeeTooLow = createCustomErrorClass(\"MaxFeeTooLow\");\nexport const PasswordsDontMatchError = createCustomErrorClass(\"PasswordsDontMatch\");\nexport const PasswordIncorrectError = createCustomErrorClass(\"PasswordIncorrect\");\nexport const RecommendSubAccountsToEmpty = createCustomErrorClass(\"RecommendSubAccountsToEmpty\");\nexport const RecommendUndelegation = createCustomErrorClass(\"RecommendUndelegation\");\nexport const TimeoutTagged = createCustomErrorClass(\"TimeoutTagged\");\nexport const UnexpectedBootloader = createCustomErrorClass(\"UnexpectedBootloader\");\nexport const MCUNotGenuineToDashboard = createCustomErrorClass(\"MCUNotGenuineToDashboard\");\nexport const RecipientRequired = createCustomErrorClass(\"RecipientRequired\");\nexport const UnavailableTezosOriginatedAccountReceive = createCustomErrorClass(\"UnavailableTezosOriginatedAccountReceive\");\nexport const UnavailableTezosOriginatedAccountSend = createCustomErrorClass(\"UnavailableTezosOriginatedAccountSend\");\nexport const UpdateFetchFileFail = createCustomErrorClass(\"UpdateFetchFileFail\");\nexport const UpdateIncorrectHash = createCustomErrorClass(\"UpdateIncorrectHash\");\nexport const UpdateIncorrectSig = createCustomErrorClass(\"UpdateIncorrectSig\");\nexport const UpdateYourApp = createCustomErrorClass(\"UpdateYourApp\");\nexport const UserRefusedDeviceNameChange = createCustomErrorClass(\"UserRefusedDeviceNameChange\");\nexport const UserRefusedAddress = createCustomErrorClass(\"UserRefusedAddress\");\nexport const UserRefusedFirmwareUpdate = createCustomErrorClass(\"UserRefusedFirmwareUpdate\");\nexport const UserRefusedAllowManager = createCustomErrorClass(\"UserRefusedAllowManager\");\nexport const UserRefusedOnDevice = createCustomErrorClass(\"UserRefusedOnDevice\"); // TODO rename because it's just for transaction refusal\nexport const PinNotSet = createCustomErrorClass(\"PinNotSet\");\nexport const ExpertModeRequired = createCustomErrorClass(\"ExpertModeRequired\");\nexport const TransportOpenUserCancelled = createCustomErrorClass(\"TransportOpenUserCancelled\");\nexport const TransportInterfaceNotAvailable = createCustomErrorClass(\"TransportInterfaceNotAvailable\");\nexport const TransportRaceCondition = createCustomErrorClass(\"TransportRaceCondition\");\nexport const TransportWebUSBGestureRequired = createCustomErrorClass(\"TransportWebUSBGestureRequired\");\nexport const TransactionHasBeenValidatedError = createCustomErrorClass(\"TransactionHasBeenValidatedError\");\nexport const TransportExchangeTimeoutError = createCustomErrorClass(\"TransportExchangeTimeoutError\");\nexport const DeviceShouldStayInApp = createCustomErrorClass(\"DeviceShouldStayInApp\");\nexport const WebsocketConnectionError = createCustomErrorClass(\"WebsocketConnectionError\");\nexport const WebsocketConnectionFailed = createCustomErrorClass(\"WebsocketConnectionFailed\");\nexport const WrongDeviceForAccount = createCustomErrorClass(\"WrongDeviceForAccount\");\nexport const WrongDeviceForAccountPayout = createCustomErrorClass(\"WrongDeviceForAccountPayout\");\nexport const WrongDeviceForAccountRefund = createCustomErrorClass(\"WrongDeviceForAccountRefund\");\nexport const WrongAppForCurrency = createCustomErrorClass(\"WrongAppForCurrency\");\nexport const ETHAddressNonEIP = createCustomErrorClass(\"ETHAddressNonEIP\");\nexport const CantScanQRCode = createCustomErrorClass(\"CantScanQRCode\");\nexport const FeeNotLoaded = createCustomErrorClass(\"FeeNotLoaded\");\nexport const FeeNotLoadedSwap = createCustomErrorClass(\"FeeNotLoadedSwap\");\nexport const FeeRequired = createCustomErrorClass(\"FeeRequired\");\nexport const FeeTooHigh = createCustomErrorClass(\"FeeTooHigh\");\nexport const PendingOperation = createCustomErrorClass(\"PendingOperation\");\nexport const SyncError = createCustomErrorClass(\"SyncError\");\nexport const PairingFailed = createCustomErrorClass(\"PairingFailed\");\nexport const PeerRemovedPairing = createCustomErrorClass(\"PeerRemovedPairing\");\nexport const GenuineCheckFailed = createCustomErrorClass(\"GenuineCheckFailed\");\nexport const LedgerAPI4xx = createCustomErrorClass(\"LedgerAPI4xx\");\nexport const LedgerAPI5xx = createCustomErrorClass(\"LedgerAPI5xx\");\nexport const FirmwareOrAppUpdateRequired = createCustomErrorClass(\"FirmwareOrAppUpdateRequired\");\n// SpeedUp / Cancel EVM tx\nexport const ReplacementTransactionUnderpriced = createCustomErrorClass(\"ReplacementTransactionUnderpriced\");\n// Bitcoin family\nexport const OpReturnDataSizeLimit = createCustomErrorClass(\"OpReturnSizeLimit\");\nexport const DustLimit = createCustomErrorClass(\"DustLimit\");\n// Language\nexport const LanguageNotFound = createCustomErrorClass(\"LanguageNotFound\");\n// db stuff, no need to translate\nexport const NoDBPathGiven = createCustomErrorClass(\"NoDBPathGiven\");\nexport const DBWrongPassword = createCustomErrorClass(\"DBWrongPassword\");\nexport const DBNotReset = createCustomErrorClass(\"DBNotReset\");\nexport const SequenceNumberError = createCustomErrorClass(\"SequenceNumberError\");\nexport const DisabledTransactionBroadcastError = createCustomErrorClass(\"DisabledTransactionBroadcastError\");\n/**\n * Type of a Transport error used to represent all equivalent errors coming from all possible implementation of Transport\n */\nexport var HwTransportErrorType;\n(function (HwTransportErrorType) {\n    HwTransportErrorType[\"Unknown\"] = \"Unknown\";\n    HwTransportErrorType[\"LocationServicesDisabled\"] = \"LocationServicesDisabled\";\n    HwTransportErrorType[\"LocationServicesUnauthorized\"] = \"LocationServicesUnauthorized\";\n    HwTransportErrorType[\"BluetoothScanStartFailed\"] = \"BluetoothScanStartFailed\";\n})(HwTransportErrorType || (HwTransportErrorType = {}));\n/**\n * Represents an error coming from the usage of any Transport implementation.\n *\n * Needed to map a specific implementation error into an error that\n * can be managed by any code unaware of the specific Transport implementation\n * that was used.\n */\nexport class HwTransportError extends Error {\n    constructor(type, message) {\n        super(message);\n        this.name = \"HwTransportError\";\n        this.type = type;\n        // Needed as long as we target < ES6\n        Object.setPrototypeOf(this, HwTransportError.prototype);\n    }\n}\n/**\n * TransportError is used for any generic transport errors.\n * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.\n */\nexport class TransportError extends Error {\n    constructor(message, id) {\n        const name = \"TransportError\";\n        super(message || name);\n        this.name = name;\n        this.message = message;\n        this.stack = new Error(message).stack;\n        this.id = id;\n    }\n}\naddCustomErrorDeserializer(\"TransportError\", e => new TransportError(e.message, e.id));\nexport const StatusCodes = {\n    ACCESS_CONDITION_NOT_FULFILLED: 0x9804,\n    ALGORITHM_NOT_SUPPORTED: 0x9484,\n    CLA_NOT_SUPPORTED: 0x6e00,\n    CODE_BLOCKED: 0x9840,\n    CODE_NOT_INITIALIZED: 0x9802,\n    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,\n    CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,\n    CONTRADICTION_INVALIDATION: 0x9810,\n    CONTRADICTION_SECRET_CODE_STATUS: 0x9808,\n    DEVICE_IN_RECOVERY_MODE: 0x662f,\n    CUSTOM_IMAGE_EMPTY: 0x662e,\n    FILE_ALREADY_EXISTS: 0x6a89,\n    FILE_NOT_FOUND: 0x9404,\n    GP_AUTH_FAILED: 0x6300,\n    HALTED: 0x6faa,\n    INCONSISTENT_FILE: 0x9408,\n    INCORRECT_DATA: 0x6a80,\n    INCORRECT_LENGTH: 0x6700,\n    INCORRECT_P1_P2: 0x6b00,\n    INS_NOT_SUPPORTED: 0x6d00,\n    DEVICE_NOT_ONBOARDED: 0x6d07,\n    DEVICE_NOT_ONBOARDED_2: 0x6611,\n    INVALID_KCV: 0x9485,\n    INVALID_OFFSET: 0x9402,\n    LICENSING: 0x6f42,\n    LOCKED_DEVICE: 0x5515,\n    MAX_VALUE_REACHED: 0x9850,\n    MEMORY_PROBLEM: 0x9240,\n    MISSING_CRITICAL_PARAMETER: 0x6800,\n    NO_EF_SELECTED: 0x9400,\n    NOT_ENOUGH_MEMORY_SPACE: 0x6a84,\n    OK: 0x9000,\n    PIN_REMAINING_ATTEMPTS: 0x63c0,\n    REFERENCED_DATA_NOT_FOUND: 0x6a88,\n    SECURITY_STATUS_NOT_SATISFIED: 0x6982,\n    TECHNICAL_PROBLEM: 0x6f00,\n    UNKNOWN_APDU: 0x6d02,\n    USER_REFUSED_ON_DEVICE: 0x5501,\n    NOT_ENOUGH_SPACE: 0x5102,\n    APP_NOT_FOUND_OR_INVALID_CONTEXT: 0x5123,\n    INVALID_APP_NAME_LENGTH: 0x670a,\n    GEN_AES_KEY_FAILED: 0x5419,\n    INTERNAL_CRYPTO_OPERATION_FAILED: 0x541a,\n    INTERNAL_COMPUTE_AES_CMAC_FAILED: 0x541b,\n    ENCRYPT_APP_STORAGE_FAILED: 0x541c,\n    INVALID_BACKUP_STATE: 0x6642,\n    PIN_NOT_SET: 0x5502,\n    INVALID_BACKUP_LENGTH: 0x6733,\n    INVALID_RESTORE_STATE: 0x6643,\n    INVALID_CHUNK_LENGTH: 0x6734,\n    INVALID_BACKUP_HEADER: 0x684a,\n    // Not documented:\n    TRUSTCHAIN_WRONG_SEED: 0xb007,\n};\nexport function getAltStatusMessage(code) {\n    switch (code) {\n        // improve text of most common errors\n        case 0x6700:\n            return \"Incorrect length\";\n        case 0x6800:\n            return \"Missing critical parameter\";\n        case 0x6982:\n            return \"Security not satisfied (dongle locked or have invalid access rights)\";\n        case 0x6985:\n            return \"Condition of use not satisfied (denied by the user?)\";\n        case 0x6a80:\n            return \"Invalid data received\";\n        case 0x6b00:\n            return \"Invalid parameter received\";\n        case 0x5515:\n            return \"Locked device\";\n    }\n    if (0x6f00 <= code && code <= 0x6fff) {\n        return \"Internal error, please report\";\n    }\n}\n/**\n * Error thrown when a device returned a non success status.\n * the error.statusCode is one of the `StatusCodes` exported by this library.\n */\nexport class TransportStatusError extends Error {\n    /**\n     * @param statusCode The error status code coming from a Transport implementation\n     * @param options containing:\n     *  - canBeMappedToChildError: enable the mapping of TransportStatusError to an error extending/inheriting from it\n     *  . Ex: LockedDeviceError. Default to true.\n     */\n    constructor(statusCode, { canBeMappedToChildError = true } = {}) {\n        const statusText = Object.keys(StatusCodes).find(k => StatusCodes[k] === statusCode) || \"UNKNOWN_ERROR\";\n        const smsg = getAltStatusMessage(statusCode) || statusText;\n        const statusCodeStr = statusCode.toString(16);\n        const message = `Ledger device: ${smsg} (0x${statusCodeStr})`;\n        super(message);\n        this.name = \"TransportStatusError\";\n        this.statusCode = statusCode;\n        this.statusText = statusText;\n        Object.setPrototypeOf(this, TransportStatusError.prototype);\n        // Maps to a LockedDeviceError\n        if (canBeMappedToChildError && statusCode === StatusCodes.LOCKED_DEVICE) {\n            return new LockedDeviceError(message);\n        }\n    }\n}\nexport class LockedDeviceError extends TransportStatusError {\n    constructor(message) {\n        super(StatusCodes.LOCKED_DEVICE, { canBeMappedToChildError: false });\n        if (message) {\n            this.message = message;\n        }\n        this.name = \"LockedDeviceError\";\n        Object.setPrototypeOf(this, LockedDeviceError.prototype);\n    }\n}\naddCustomErrorDeserializer(\"TransportStatusError\", e => new TransportStatusError(e.statusCode));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KNOWN_JETTONS = exports.parseMessage = exports.TonTransport = void 0;\nvar TonTransport_1 = require(\"./TonTransport\");\nObject.defineProperty(exports, \"TonTransport\", { enumerable: true, get: function () { return TonTransport_1.TonTransport; } });\nObject.defineProperty(exports, \"parseMessage\", { enumerable: true, get: function () { return TonTransport_1.parseMessage; } });\nObject.defineProperty(exports, \"KNOWN_JETTONS\", { enumerable: true, get: function () { return TonTransport_1.KNOWN_JETTONS; } });\n","export default function compareVersions(versionA: string, versionB: string): -1 | 0 | 1 {\n  const partsA = versionA.split('.').map(Number);\n  const partsB = versionB.split('.').map(Number);\n\n  for (let i = 0; i < Math.max(partsA.length, partsB.length); i++) {\n    const partA = partsA[i] || 0;\n    const partB = partsB[i] || 0;\n\n    if (partA > partB) return 1;\n    if (partA < partB) return -1;\n  }\n\n  return 0;\n}\n","import type { ApiNetwork, ApiTonWallet } from '../../api/types';\n\nimport { WORKCHAIN, Workchain } from '../../api/chains/ton/constants';\n\nconst BROKEN_CONNECTION_ERRORS = new Set(['DisconnectedDeviceDuringOperation', 'TransportRaceCondition']);\n\nexport function getLedgerAccountPathByWallet(network: ApiNetwork, wallet: ApiTonWallet, workchain?: Workchain) {\n  return getLedgerAccountPathByIndex(wallet.index, network !== 'mainnet', workchain);\n}\n\nexport function getLedgerAccountPathByIndex(index: number, isTestnet: boolean, workchain = WORKCHAIN) {\n  const network = isTestnet ? 1 : 0;\n  const chain = workchain === Workchain.MasterChain ? 255 : 0;\n  return [44, 607, network, chain, index, 0];\n}\n\nexport function isLedgerConnectionBroken(error: string) {\n  return BROKEN_CONNECTION_ERRORS.has(error);\n}\n","import Transport from '@ledgerhq/hw-transport';\n\nimport { IS_AIR_APP } from '../../config';\nimport { callWindow } from '../../util/windowProvider/connector';\n\n/**\n * Serialization format differs between web/capacitor and native apps:\n *  - Native (AIR) apps: Use hex format (expected by native Ledger library implementations)\n *  - Web/Capacitor apps: Use base64 format (more efficient for browser message passing)\n */\nconst serializationFormat = IS_AIR_APP ? 'hex' : 'base64';\n\n/**\n * A Ledger's Transport implementation that passes the data to the actual transfer object in the main browser thread\n * (src/util/ledger/index.ts) via postMessage (because actual Ledger transports don't work in worker threads).\n */\nexport class WindowTransport extends Transport {\n  async exchange(apdu: Buffer) {\n    const response = await callWindow('exchangeWithLedger', apdu.toString(serializationFormat));\n    return Buffer.from(response, serializationFormat);\n  }\n}\n","/*\n * This file must be imported dynamically via import().\n * This is needed to reduce the app size when Ledger is not used.\n */\n\nimport { TransportStatusError } from '@ledgerhq/errors';\nimport type { Address, Cell } from '@ton/core';\nimport type { TonPayloadFormat } from '@ton-community/ton-ledger';\nimport { KNOWN_JETTONS, parseMessage, TonTransport } from '@ton-community/ton-ledger';\n\nimport type { ApiTonConnectProof } from '../../../tonConnect/types';\nimport type { ApiNetwork, ApiTonWallet } from '../../../types';\nimport type { ApiTonWalletVersion, PreparedTransactionToSign, TonTransferHints } from '../types';\nimport { ApiHardwareError } from '../../../types';\n\nimport compareVersions from '../../../../util/compareVersions';\nimport { getLedgerAccountPathByWallet } from '../../../../util/ledger/utils';\nimport { logDebug, logDebugError } from '../../../../util/logs';\nimport { WindowTransport } from '../../../common/ledger';\nimport { ATTEMPTS, TRANSFER_TIMEOUT_SEC, WORKCHAIN } from '../constants';\nimport { resolveTokenAddress, toBase64Address } from './tonCore';\n\nexport type LedgerTransactionParams = Parameters<TonTransport['signTransaction']>[1];\n\n// You can use the https://github.com/LedgerHQ/app-ton history as the version support reference\nconst VERSION_WITH_WALLET_SPECIFIERS = '2.1';\nconst VERSION_WITH_JETTON_ID = '2.2';\nconst VERSION_WITH_GET_SETTINGS = '2.1';\nconst VERSION_WITH_PAYLOAD: Record<TonPayloadFormat['type'], string> = {\n  unsafe: '2.1',\n  comment: '0',\n  'jetton-transfer': '0',\n  'nft-transfer': '2.1',\n  'jetton-burn': '2.1',\n  'add-whitelist': '2.1',\n  'single-nominator-withdraw': '2.1',\n  'single-nominator-change-validator': '2.1',\n  'tonstakers-deposit': '2.1',\n  'vote-for-proposal': '2.1',\n  'change-dns-record': '2.1',\n  'token-bridge-pay-swap': '2.1',\n};\n\nconst knownJettonAddresses = Object.fromEntries(\n  KNOWN_JETTONS.map(({ masterAddress }, jettonId) => [\n    toBase64Address(masterAddress, true, 'mainnet'),\n    jettonId,\n  ]),\n);\n\nconst ledgerTransport = new TonTransport(new WindowTransport());\n\n/** Thrown when and only when the Ledger TON app needs to be updated to support this transaction */\nexport const unsupportedError = new Error('Unsupported');\n\nexport const lacksBlindSigningError = new Error('Lacks blind signing');\n\nexport async function signTonProofWithLedger(\n  network: ApiNetwork,\n  wallet: ApiTonWallet,\n  proof: ApiTonConnectProof,\n): Promise<Buffer | { error: ApiHardwareError }> {\n  const accountPath = getLedgerAccountPathByWallet(network, wallet);\n  const { timestamp, domain, payload } = proof;\n\n  try {\n    const result = await ledgerTransport.getAddressProof(accountPath, {\n      domain,\n      timestamp,\n      payload: Buffer.from(payload),\n    });\n    return result.signature;\n  } catch (err) {\n    return handleLedgerError(err);\n  }\n}\n\n/**\n * Signs the given TON transactions using Ledger. Because Ledger can't sign multiple messages at once, each transaction\n * must contain exactly 1 message, and the transactions will be signed one by one. If everything is ok, returns the\n * signed transactions in the same order as the input transactions.\n */\nexport async function signTonTransactionsWithLedger(\n  network: ApiNetwork,\n  wallet: ApiTonWallet,\n  tonTransactions: PreparedTransactionToSign[],\n  subwalletId?: number,\n  maxRetries = ATTEMPTS,\n): Promise<Cell[] | { error: ApiHardwareError }> {\n  const accountPath = getLedgerAccountPathByWallet(network, wallet);\n  const ledgerVersion = await ledgerTransport.getVersion();\n  const isBlindSigningEnabled = await getIsBlindSigningEnabled(ledgerVersion);\n  let ledgerTransactions: LedgerTransactionParams[];\n\n  // To improve the UX, making sure all the transactions are signable before asking the user to sign them\n  try {\n    ledgerTransactions = await Promise.all(tonTransactions.map((tonTransaction) => (\n      tonTransactionToLedgerTransaction(\n        network,\n        wallet.version,\n        tonTransaction,\n        ledgerVersion,\n        isBlindSigningEnabled,\n        subwalletId,\n      )\n    )));\n  } catch (err) {\n    if (err === unsupportedError) return { error: ApiHardwareError.HardwareOutdated };\n    if (err === lacksBlindSigningError) return { error: ApiHardwareError.BlindSigningNotEnabled };\n    throw err;\n  }\n\n  return signLedgerTransactionsWithRetry(accountPath, ledgerTransactions, maxRetries);\n}\n\nasync function getIsBlindSigningEnabled(ledgerVersion: string) {\n  if (!doesSupport(ledgerVersion, VERSION_WITH_GET_SETTINGS)) {\n    return true; // If Ledger actually doesn't allow blind signing, it will throw an error later\n  }\n\n  const { blindSigningEnabled } = await ledgerTransport.getSettings();\n  return blindSigningEnabled;\n}\n\n/**\n * Converts a transaction, that you would pass to `TonWallet.createTransfer`, to the format suitable for Ledger's\n * `TonTransport.signTransaction`.\n *\n * Exported for tests only.\n */\nexport async function tonTransactionToLedgerTransaction(\n  network: ApiNetwork,\n  walletVersion: ApiTonWalletVersion,\n  tonTransaction: PreparedTransactionToSign,\n  ledgerVersion: string,\n  isBlindSigningEnabled: boolean,\n  subwalletId?: number,\n): Promise<LedgerTransactionParams> {\n  const { authType = 'external', sendMode = 0, seqno, timeout, hints } = tonTransaction;\n  const message = getMessageFromTonTransaction(tonTransaction);\n\n  if (authType !== 'external') {\n    throw new Error(`Unsupported transaction authType \"${authType}\"`);\n  }\n  if (message.info.type !== 'internal') {\n    throw new Error(`Unsupported message type \"${message.info.type}\"`);\n  }\n\n  return {\n    to: message.info.dest,\n    sendMode,\n    seqno,\n    timeout: timeout ?? getFallbackTimeout(),\n    bounce: message.info.bounce,\n    amount: message.info.value.coins,\n    stateInit: message.init ?? undefined,\n    payload: await getPayload(network, message.info.dest, message.body, ledgerVersion, isBlindSigningEnabled, hints),\n    walletSpecifiers: getWalletSpecifiers(walletVersion, ledgerVersion, subwalletId),\n  };\n}\n\nfunction getMessageFromTonTransaction({ messages }: PreparedTransactionToSign) {\n  if (messages.length === 0) throw new Error('No messages');\n  if (messages.length > 1) throw new Error('Ledger doesn\\'t support signing more than 1 message');\n  return messages[0];\n}\n\nfunction getFallbackTimeout() {\n  return Math.floor(Date.now() / 1000 + TRANSFER_TIMEOUT_SEC);\n}\n\n/**\n * Like `tonPayloadToLedgerPayload`, but also performs long asynchronous operations such as fetching data for the\n * `knownJetton` field.\n */\nasync function getPayload(\n  network: ApiNetwork,\n  toAddress: Address,\n  tonPayload: Cell | undefined,\n  ledgerVersion: string,\n  isBlindSigningEnabled: boolean,\n  { tokenAddress }: TonTransferHints = {},\n) {\n  const ledgerPayload = tonPayloadToLedgerPayload(tonPayload, ledgerVersion);\n\n  if (ledgerPayload?.type === 'jetton-transfer' && doesSupport(ledgerVersion, VERSION_WITH_JETTON_ID)) {\n    if (!tokenAddress) {\n      const tokenWalletAddress = toBase64Address(toAddress, true, network);\n      tokenAddress = await resolveTokenAddress(network, tokenWalletAddress);\n    }\n\n    if (tokenAddress) {\n      ledgerPayload.knownJetton = getKnownJetton(tokenAddress);\n    }\n  }\n\n  if (ledgerPayload?.type === 'unsafe' && !isBlindSigningEnabled) {\n    throw lacksBlindSigningError;\n  }\n\n  return ledgerPayload;\n}\n\n/**\n * Converts a TON message body to the Ledger payload format. Doesn't populate the `knownJetton` field.\n *\n * Exported for tests only.\n */\nexport function tonPayloadToLedgerPayload(tonPayload: Cell | undefined, ledgerVersion: string) {\n  if (!tonPayload) {\n    return undefined;\n  }\n\n  let ledgerPayload: TonPayloadFormat | undefined;\n\n  try {\n    ledgerPayload = parseMessage(tonPayload, {\n      disallowModification: true,\n      disallowUnsafe: true, // Otherwise no error will be thrown, and we won't see why the payload can't be converted\n    });\n  } catch (err) {\n    logDebug('Unsafe Ledger payload', err);\n    ledgerPayload = {\n      type: 'unsafe',\n      message: tonPayload,\n    };\n  }\n\n  if (ledgerPayload && !doesSupport(ledgerVersion, VERSION_WITH_PAYLOAD[ledgerPayload.type])) {\n    logDebug(`The ${ledgerPayload.type} payload type is not supported by Ledger TON v${ledgerVersion}`);\n    if (!doesSupport(ledgerVersion, VERSION_WITH_PAYLOAD.unsafe)) {\n      throw unsupportedError;\n    }\n\n    logDebug('Falling back to an unsafe payload');\n    ledgerPayload = {\n      type: 'unsafe',\n      message: tonPayload,\n    };\n  }\n\n  return ledgerPayload;\n}\n\nasync function signLedgerTransactionsWithRetry(\n  accountPath: number[],\n  ledgerTransactions: LedgerTransactionParams[],\n  maxRetries: number,\n) {\n  const signedTransactions: Cell[] = [];\n  let retryCount = 0;\n  let index = 0;\n\n  while (index < ledgerTransactions.length) {\n    try {\n      signedTransactions.push(await ledgerTransport.signTransaction(accountPath, ledgerTransactions[index]));\n      index++;\n    } catch (err) {\n      try {\n        return handleLedgerError(err);\n      } catch {\n        if (retryCount >= maxRetries) {\n          throw err;\n        }\n        retryCount++;\n      }\n      logDebugError('signLedgerTransactionsWithRetry', err);\n    }\n  }\n\n  return signedTransactions;\n}\n\nfunction doesSupport(ledgerVersion: string, featureVersion: string) {\n  return compareVersions(ledgerVersion, featureVersion) >= 0;\n}\n\nfunction getKnownJetton(tokenAddress: string) {\n  const jettonId = knownJettonAddresses[tokenAddress];\n  // eslint-disable-next-line no-null/no-null\n  return jettonId === undefined ? null : { jettonId, workchain: WORKCHAIN };\n}\n\nfunction getWalletSpecifiers(walletVersion: ApiTonWalletVersion, ledgerVersion: string, subwalletId?: number) {\n  if (walletVersion === 'v3R2') {\n    if (!doesSupport(ledgerVersion, VERSION_WITH_WALLET_SPECIFIERS)) throw unsupportedError;\n    return { includeWalletOp: false };\n  }\n  if (subwalletId !== undefined) {\n    if (!doesSupport(ledgerVersion, VERSION_WITH_WALLET_SPECIFIERS)) throw unsupportedError;\n    return { subwalletId, includeWalletOp: false };\n  }\n  return undefined;\n}\n\n/** Throws unexpected errors (i.e. caused by mistakes in the app code), and returns expected */\nfunction handleLedgerError(error: unknown) {\n  if (error instanceof TransportStatusError) {\n    // Status code reference: https://github.com/LedgerHQ/app-ton/blob/d3e1edbbc1fcf9a5d6982fbb971f757a83d0aa56/src/sw.h\n    switch (error.statusCode) {\n      case 0x6985: return { error: ApiHardwareError.RejectedByUser };\n      case 0xbd00: return { error: ApiHardwareError.BlindSigningNotEnabled };\n      // The limits for Ton Connect proofs are: payload ≤ 128 bytes, domain ≤ 128 bytes, payload + domain ≤ 222 bytes\n      case 0xb00b: return { error: ApiHardwareError.ProofTooLarge };\n    }\n  }\n\n  throw error;\n}\n"],"names":["compareVersions","versionA","versionB","partsA","split","map","Number","partsB","i","Math","max","length","partA","partB","WORKCHAIN","Workchain","BROKEN_CONNECTION_ERRORS","Set","getLedgerAccountPathByWallet","network","wallet","workchain","getLedgerAccountPathByIndex","index","isTestnet","arguments","undefined","chain","MasterChain","isLedgerConnectionBroken","error","has","Transport","IS_AIR_APP","callWindow","serializationFormat","WindowTransport","exchange","apdu","response","toString","Buffer","from","TransportStatusError","KNOWN_JETTONS","parseMessage","TonTransport","ApiHardwareError","logDebug","logDebugError","ATTEMPTS","TRANSFER_TIMEOUT_SEC","resolveTokenAddress","toBase64Address","VERSION_WITH_WALLET_SPECIFIERS","VERSION_WITH_JETTON_ID","VERSION_WITH_GET_SETTINGS","VERSION_WITH_PAYLOAD","unsafe","comment","knownJettonAddresses","Object","fromEntries","_ref","jettonId","masterAddress","ledgerTransport","unsupportedError","Error","lacksBlindSigningError","signTonProofWithLedger","proof","accountPath","timestamp","domain","payload","result","getAddressProof","signature","err","handleLedgerError","signTonTransactionsWithLedger","tonTransactions","subwalletId","maxRetries","ledgerVersion","getVersion","isBlindSigningEnabled","getIsBlindSigningEnabled","ledgerTransactions","Promise","all","tonTransaction","tonTransactionToLedgerTransaction","version","HardwareOutdated","BlindSigningNotEnabled","signLedgerTransactionsWithRetry","doesSupport","blindSigningEnabled","getSettings","walletVersion","authType","sendMode","seqno","timeout","hints","message","getMessageFromTonTransaction","info","type","to","dest","getFallbackTimeout","bounce","amount","value","coins","stateInit","init","getPayload","body","walletSpecifiers","getWalletSpecifiers","_ref2","messages","floor","Date","now","toAddress","tonPayload","tokenAddress","ledgerPayload","tonPayloadToLedgerPayload","tokenWalletAddress","knownJetton","getKnownJetton","disallowModification","disallowUnsafe","signedTransactions","retryCount","push","signTransaction","featureVersion","includeWalletOp","statusCode","RejectedByUser","ProofTooLarge"],"sourceRoot":""}