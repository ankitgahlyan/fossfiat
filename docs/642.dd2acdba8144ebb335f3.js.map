{"version":3,"file":"642.dd2acdba8144ebb335f3.js","mappings":"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","sources":["webpack://mytonwallet/./src/lib/ledger-hw-transport-ble/awaitsBleOn.ts","webpack://mytonwallet/./src/lib/ledger-hw-transport-ble/monitorCharacteristic.ts","webpack://mytonwallet/./src/lib/ledger-hw-transport-ble/remapErrors.ts","webpack://mytonwallet/./src/lib/ledger-hw-transport-ble/BleTransport.ts","webpack://mytonwallet/./src/util/ledger/bleConnector.ts"],"sourcesContent":["import { BluetoothLe } from '@capacitor-community/bluetooth-le';\nimport { BluetoothRequired } from '@ledgerhq/errors';\n\nexport async function awaitsBleOn(): Promise<void> {\n  await BluetoothLe.initialize();\n  const isEnabled = await BluetoothLe.isEnabled();\n  if (!isEnabled) {\n    throw new BluetoothRequired('', {\n      state: 'disable',\n    });\n  }\n}\n","import { BleClient } from '@capacitor-community/bluetooth-le';\nimport type { TraceContext } from '@ledgerhq/logs';\nimport { LocalTracer } from '@ledgerhq/logs';\nimport { Observable } from 'rxjs';\n\nimport type { Characteristic } from './types';\n\nconst LOG_TYPE = 'ble-verbose';\n\nexport const monitorCharacteristic = (\n  deviceId: string,\n  serviceId: string,\n  characteristic: Characteristic,\n  context?: TraceContext,\n): Observable<Buffer> => new Observable((o) => {\n  const tracer = new LocalTracer(LOG_TYPE, context);\n  tracer.trace('Start monitoring BLE characteristics', {\n    characteristicUuid: characteristic.uuid,\n  });\n\n  void BleClient.startNotifications(\n    deviceId,\n    serviceId,\n    characteristic.uuid,\n    (value) => {\n      const uint8Array = new Uint8Array(value.buffer);\n      const buffer = Buffer.from(uint8Array);\n      o.next(buffer);\n    },\n  );\n\n  return () => {\n    void BleClient.stopEnabledNotifications();\n  };\n});\n","import {\n  DisconnectedDevice,\n} from '@ledgerhq/errors';\n\nexport type IOBleErrorRemap = Error | null | undefined;\n\nexport const remapError = (error: IOBleErrorRemap): IOBleErrorRemap => {\n  if (!error || !error.message) return error;\n\n  if (error.message.includes('was disconnected') || error.message.includes('not found')) {\n    return new DisconnectedDevice();\n  }\n\n  return error;\n};\n\nexport const rethrowError = (e: Error | null | undefined): never => {\n  // throw remapError(e);\n  throw e ?? new Error();\n};\n\nexport const decoratePromiseErrors = <A>(promise: Promise<A>): Promise<A> => promise.catch(rethrowError);\n","/* eslint-disable @typescript-eslint/no-redundant-type-constituents */\nimport type { BleService } from '@capacitor-community/bluetooth-le';\nimport { BleClient, ConnectionPriority } from '@capacitor-community/bluetooth-le';\nimport type { BluetoothInfos, DeviceModel } from '@ledgerhq/devices';\nimport { DeviceModelId, getBluetoothServiceUuids, getInfosForServiceUuid } from '@ledgerhq/devices';\nimport { receiveAPDU } from '@ledgerhq/devices/lib/ble/receiveAPDU';\n// ---------------------------------------------------------------------------------------------\n// Since this is a react-native library and metro bundler does not support\n// package exports yet (see: https://github.com/facebook/metro/issues/670)\n// we need to import the file directly from the lib folder.\n// Otherwise it would force the consumer of the lib to manually \"tell\" metro to resolve to /lib.\n//\n// TLDR: /!\\ Do not remove the /lib part in the import statements below (@ledgerhq/devices/lib) ! /!\\\n// See: https://github.com/LedgerHQ/ledger-live/pull/879\nimport { sendAPDU } from '@ledgerhq/devices/lib/ble/sendAPDU';\nimport type { HwTransportError } from '@ledgerhq/errors';\nimport {\n  CantOpenDevice,\n  DisconnectedDeviceDuringOperation,\n  PairingFailed,\n  TransportError,\n  TransportExchangeTimeoutError,\n} from '@ledgerhq/errors';\nimport type { Observer as TransportObserver, Subscription as TransportSubscription } from '@ledgerhq/hw-transport';\nimport Transport from '@ledgerhq/hw-transport';\nimport type { TraceContext } from '@ledgerhq/logs';\nimport { LocalTracer, trace } from '@ledgerhq/logs';\nimport type { Observable, SchedulerLike } from 'rxjs';\nimport {\n  defer, firstValueFrom, from, merge, of, throwError, TimeoutError,\n} from 'rxjs';\nimport {\n  catchError, finalize, first, ignoreElements, map, share, tap, timeout,\n} from 'rxjs/operators';\nimport { v4 as uuid } from 'uuid';\nimport type { BleCharacteristic } from '@capacitor-community/bluetooth-le/dist/esm/definitions';\n\nimport type { IOBleErrorRemap } from './remapErrors';\nimport type { Characteristic, Device, ReconnectionConfig } from './types';\n\nimport { awaitsBleOn } from './awaitsBleOn';\nimport { monitorCharacteristic } from './monitorCharacteristic';\nimport { decoratePromiseErrors, remapError } from './remapErrors';\n\nconst LOG_TYPE = 'ble-verbose';\n\n/**\n * This is potentially not needed anymore, to be checked if the bug is still happening.\n */\nconst reconnectionConfig: ReconnectionConfig | null | undefined = {\n  pairingThreshold: 1000,\n  delayAfterFirstPairing: 4000,\n};\n\n// Allows us to give more granulary error messages\nconst bluetoothInfoCache: Record<string, BluetoothInfos> = {};\n\nfunction retrieveInfos(device: Device | null): BluetoothInfos | undefined {\n  if (!device || !device.uuids) return undefined;\n  const [serviceUUID] = device.uuids;\n  if (!serviceUUID) return undefined;\n  const infos = getInfosForServiceUuid(serviceUUID);\n  if (!infos) return undefined;\n\n  // If we retrieved information, update the cache\n  bluetoothInfoCache[device.deviceId] = infos;\n  return infos;\n}\n\nconst delay = (ms: number | undefined) => new Promise((success) => setTimeout(success, ms));\n\n/**\n * A cache of Bluetooth transport instances associated with device IDs.\n * Allows efficient storage and retrieval of previously initialized transports.\n * @type {Object.<string, BluetoothTransport>}\n */\nconst transportsCache: Record<string, BleTransport> = {};\n\n// `connectOptions` is actually used by `react-native-ble-plx` even if comment above `ConnectionOptions` says it's not used\nconst connectOptions: Record<string, unknown> = {\n  // 156 bytes to max the iOS < 10 limit (158 bytes)\n  // (185 bytes for iOS >= 10)(up to 512 bytes for Android, but could be blocked at 23 bytes)\n  requestMTU: 156,\n  // Priority 1 = high.\n  connectionPriority: 1,\n};\n\nconst clearDisconnectTimeout = (deviceId: string, context?: TraceContext): void => {\n  const cachedTransport = transportsCache[deviceId];\n  if (cachedTransport && cachedTransport.disconnectTimeout) {\n    trace({ type: LOG_TYPE, message: 'Clearing queued disconnect', context });\n    clearTimeout(cachedTransport.disconnectTimeout);\n  }\n};\n\nlet currentDeviceService: string | undefined;\n\n/**\n * React Native bluetooth BLE implementation\n * @example\n * import BleTransport from \"@ledgerhq/react-native-hw-transport-ble\";\n */\nexport default class BleTransport extends Transport {\n  static disconnectTimeoutMs = 5000;\n\n  static list = (): Promise<void[]> => {\n    throw new Error('not implemented');\n  };\n\n  /**\n   * Scan for bluetooth Ledger devices\n   * @param observer Device is partial in order to avoid the live-common/this dep\n   * @returns TransportSubscription\n   */\n  static listen(\n    observer: TransportObserver<any, HwTransportError>,\n  ): TransportSubscription {\n    let unsubscribed: boolean = false;\n    const tracer = new LocalTracer(LOG_TYPE);\n    tracer.trace('Listening for devices ...');\n\n    void BleClient.getConnectedDevices(getBluetoothServiceUuids()).then(async (devices) => {\n      if (unsubscribed) return;\n      for (const it of devices) {\n        observer.next({\n          type: 'add',\n          device: it,\n        });\n      }\n      await BleClient.stopLEScan();\n      void BleClient.requestLEScan({\n        services: getBluetoothServiceUuids(),\n      }, (result) => {\n        if (unsubscribed) return;\n        observer.next({\n          type: 'add',\n          device: result.device,\n        });\n      });\n    });\n\n    return {\n      unsubscribe: async () => {\n        unsubscribed = true;\n        await BleClient.stopLEScan();\n      },\n    };\n  }\n\n  /**\n   * Opens a BLE transport\n   *\n   * @param {Device | string} deviceOrId\n   * @param timeoutMs Applied when trying to connect to a device\n   * @param context An optional context object for log/tracing strategy\n   * @param injectedDependencies Contains optional injected dependencies used by the transport implementation\n   *  - rxjsScheduler: dependency injected RxJS scheduler to control time. Default AsyncScheduler.\n   */\n  static async open(\n    deviceOrId: Device | string,\n    timeoutMs?: number,\n    context?: TraceContext,\n    { rxjsScheduler }: { rxjsScheduler?: SchedulerLike } = {},\n  ): Promise<BleTransport> {\n    return open(deviceOrId, true, timeoutMs, context, { rxjsScheduler });\n  }\n\n  /**\n   * Exposes method from the ble-plx library to disconnect a device\n   *\n   * Disconnects from {@link Device} if it's connected or cancels pending connection.\n   * A \"disconnect\" event will normally be emitted by the ble-plx lib once the device is disconnected.\n   * Errors are logged but silenced.\n   */\n  static disconnectDevice = async (id: string,\n    onDisconnect?: (e?: Error) => void,\n    context?: TraceContext): Promise<void> => {\n    const tracer = new LocalTracer(LOG_TYPE, context);\n    tracer.trace(`Trying to disconnect device ${id}`);\n\n    try {\n      await BleClient.disconnect(id);\n      onDisconnect?.();\n    } catch (error) {\n      // Only log, ignore if disconnect did not work\n      tracer\n        .withType('ble-error')\n        .trace('Error while trying to cancel device connection', { error });\n    }\n    tracer.trace(`Device ${id} disconnected`);\n  };\n\n  device: Device;\n\n  deviceModel: DeviceModel;\n\n  // eslint-disable-next-line no-null/no-null\n  disconnectTimeout: null | ReturnType<typeof setTimeout> = null;\n\n  id: string;\n\n  isConnected = true;\n\n  mtuSize = 20;\n\n  // Observable emitting data received from the device via BLE\n  notifyObservable: Observable<Buffer | Error>;\n\n  notYetDisconnected = true;\n\n  writableWithResponseCharacteristic: Characteristic;\n\n  writableWithoutResponseCharacteristic: Characteristic | undefined;\n\n  rxjsScheduler?: SchedulerLike;\n\n  // Transaction ids of communication operations that are currently pending\n  currentTransactionIds: Array<string>;\n\n  onDisconnect: ((error?: Error) => void) | undefined;\n\n  disconnectCallback: (() => void) | undefined;\n\n  /**\n   * The static `open` function is used to handle `BleTransport` instantiation\n   *\n   * @param device\n   * @param writableWithResponseCharacteristic A BLE characteristic that we can write on,\n   *   and that will be acknowledged in response from the device when it receives the written value.\n   * @param writableWithoutResponseCharacteristic A BLE characteristic that we can write on,\n   *   and that will not be acknowledged in response from the device\n   * @param notifyObservable A multicast observable that emits messages received from the device\n   * @param deviceModel\n   * @param params Contains optional options and injected dependencies used by the transport implementation\n   *  - abortTimeoutMs: stop the exchange after a given timeout. Another timeout exists\n   *    to detect unresponsive device (see `unresponsiveTimeout`). This timeout aborts the exchange.\n   *  - rxjsScheduler: dependency injected RxJS scheduler to control time. Default: AsyncScheduler.\n   */\n  constructor(\n    device: Device,\n    writableWithResponseCharacteristic: Characteristic,\n    writableWithoutResponseCharacteristic: Characteristic | undefined,\n    notifyObservable: Observable<Buffer | Error>,\n    deviceModel: DeviceModel,\n    { context, rxjsScheduler }: { context?: TraceContext; rxjsScheduler?: SchedulerLike } = {},\n  ) {\n    super({ context, logType: LOG_TYPE });\n    this.id = device.deviceId;\n    this.device = device;\n    this.writableWithResponseCharacteristic = writableWithResponseCharacteristic;\n    this.writableWithoutResponseCharacteristic = writableWithoutResponseCharacteristic;\n    this.notifyObservable = notifyObservable;\n    this.deviceModel = deviceModel;\n    this.rxjsScheduler = rxjsScheduler;\n    this.currentTransactionIds = [];\n\n    clearDisconnectTimeout(this.id);\n\n    this.tracer.trace(`New instance of BleTransport for device ${this.id}`);\n  }\n\n  /**\n   * A message exchange (APDU request <-> response) with the device that can be aborted.\n   *\n   * The message will be BLE-encoded/framed before being sent, and the response will be BLE-decoded.\n   *\n   * @param message A buffer (u8 array) of a none BLE-encoded message (an APDU for ex) to be sent to the device\n   *   as a request\n   * @param options Contains optional options for the exchange function\n   *  - abortTimeoutMs: stop the exchange after a given timeout. Another timeout exists\n   *    to detect unresponsive device (see `unresponsiveTimeout`). This timeout aborts the exchange.\n   * @returns A promise that resolves with the response data from the device.\n   */\n  exchange = (\n    message: Buffer,\n    { abortTimeoutMs }: { abortTimeoutMs?: number } = {},\n  ): Promise<Buffer> => {\n    if (this.exchangeBusyPromise) {\n      void BleTransport.disconnectDevice(this.id, this.onDisconnect);\n    }\n    const tracer = this.tracer.withUpdatedContext({\n      function: 'exchange',\n    });\n    tracer.trace('Exchanging APDU ...', { abortTimeoutMs });\n    tracer.withType('apdu').trace(`=> ${message.toString('hex')}`);\n\n    return this.exchangeAtomicImpl(() => {\n      return firstValueFrom(\n        // `sendApdu` will only emit if an error occurred, otherwise it will complete,\n        // while `receiveAPDU` will emit the full response.\n        // Consequently, it monitors the response while being able to reject on an error from the send.\n        merge(\n          this.notifyObservable.pipe((data) => receiveAPDU(data, { context: tracer.getContext() })),\n          sendAPDU(this.write, message, this.mtuSize, {\n            context: tracer.getContext(),\n          }),\n        ).pipe(\n          abortTimeoutMs ? timeout(abortTimeoutMs, this.rxjsScheduler) : tap(),\n          tap((data) => {\n            tracer.withType('apdu').trace(`<= ${data.toString('hex')}`);\n          }),\n          catchError(async (error) => {\n            // Currently only 1 reason the exchange has been explicitly aborted (other than job and transport errors): a timeout\n            if (error instanceof TimeoutError) {\n              tracer.trace(\n                'Aborting due to timeout and trying to cancel all communication write of the current exchange',\n                {\n                  abortTimeoutMs,\n                  transactionIds: this.currentTransactionIds,\n                },\n              );\n\n              // No concurrent exchange should happen at the same time, so all pending operations are part of the same exchange\n              await this.cancelPendingOperations();\n\n              throw new TransportExchangeTimeoutError('Exchange aborted due to timeout');\n            }\n\n            tracer.withType('ble-error').trace('Error while exchanging APDU', { error });\n\n            if (this.notYetDisconnected) {\n              // In such case we will always disconnect because something is bad.\n              // This sends a `disconnect` event.\n              await BleTransport.disconnectDevice(this.id, this.onDisconnect);\n            }\n\n            const mappedError = remapError(error as IOBleErrorRemap);\n            tracer.trace('Error while exchanging APDU, mapped and throws following error', {\n              mappedError,\n            });\n            // eslint-disable-next-line @typescript-eslint/only-throw-error\n            throw mappedError;\n          }),\n          finalize(() => {\n            tracer.trace('Clearing current transaction ids', {\n              currentTransactionIds: this.currentTransactionIds,\n            });\n            this.clearCurrentTransactionIds();\n          }),\n        ),\n      );\n    });\n  };\n\n  private async cancelPendingOperations() {\n    // BleTransport does not support cancellation\n    await BleTransport.disconnectDevice(this.id, this.onDisconnect);\n  }\n\n  /**\n   * Sets the collection of current transaction ids to an empty array\n   */\n  private clearCurrentTransactionIds() {\n    this.currentTransactionIds = [];\n  }\n\n  /**\n   * Negotiate with the device the maximum transfer unit for the ble frames\n   * @returns Promise<number>\n   */\n  async inferMTU(): Promise<number> {\n    let mtu = (await BleClient.getMtu(this.device.deviceId));\n    this.tracer.trace('Inferring MTU ...', { currentDeviceMtu: mtu });\n\n    await this.exchangeAtomicImpl(async () => {\n      try {\n        mtu = await firstValueFrom(\n          merge(\n            this.notifyObservable.pipe(\n              map((maybeError) => {\n                // Catches the `PairingFailed` Error that has only been emitted\n                if (maybeError instanceof Error) {\n                  throw maybeError;\n                }\n\n                return maybeError;\n              }),\n              first((buffer) => buffer.readUInt8(0) === 0x08),\n              map((buffer) => buffer.readUInt8(5)),\n            ),\n            defer(() => from(this.write(Buffer.from([0x08, 0, 0, 0, 0])))).pipe(ignoreElements()),\n          ),\n        );\n      } catch (error: any) {\n        this.tracer.withType('ble-error').trace('Error while inferring MTU', { mtu });\n\n        await BleTransport.disconnectDevice(this.id, this.onDisconnect);\n\n        const mappedError = remapError(error);\n        this.tracer.trace('Error while inferring APDU, mapped and throws following error', {\n          mappedError,\n        });\n        // eslint-disable-next-line @typescript-eslint/only-throw-error\n        throw mappedError;\n      } finally {\n        // When negotiating the MTU, a message is sent/written to the device, and a transaction id was associated to this write\n        this.clearCurrentTransactionIds();\n      }\n    });\n\n    this.tracer.trace('Successfully negotiated MTU with device', {\n      mtu,\n      mtuSize: this.mtuSize,\n    });\n    if (mtu > 20) {\n      this.mtuSize = mtu;\n    }\n\n    return this.mtuSize;\n  }\n\n  /**\n   * Exposed method from the ble-plx library.\n   * Request the connection priority for the given device.\n   * @returns {Promise<void>}\n   * @param connectionPriority\n   */\n  async requestConnectionPriority(\n    connectionPriority: 'Balanced' | 'High' | 'LowPower',\n  ): Promise<void> {\n    let connectionPriorityMapped: ConnectionPriority;\n    switch (connectionPriority) {\n      case 'High':\n        connectionPriorityMapped = ConnectionPriority.CONNECTION_PRIORITY_BALANCED;\n        break;\n      case 'LowPower':\n        connectionPriorityMapped = ConnectionPriority.CONNECTION_PRIORITY_LOW_POWER;\n        break;\n      case 'Balanced':\n        connectionPriorityMapped = ConnectionPriority.CONNECTION_PRIORITY_BALANCED;\n        break;\n    }\n    await decoratePromiseErrors(\n      BleClient.requestConnectionPriority(this.device.deviceId, connectionPriorityMapped),\n    );\n  }\n\n  /**\n   * Do not call this directly unless you know what you're doing. Communication\n   * with a Ledger device should be through the {@link exchange} method.\n   *\n   * For each call a transaction id is added to the current stack of transaction ids.\n   * With this transaction id, a pending BLE communication operations can be cancelled.\n   * Note: each frame/packet of a longer BLE-encoded message to be sent should have their unique transaction id.\n   *\n   * @param buffer BLE-encoded packet to send to the device\n   * @param frameId Frame id to make `write` aware of a bigger message that this frame/packet is part of.\n   *  Helps to create related a collection of transaction ids\n   */\n  write = async (buffer: Buffer): Promise<void> => {\n    const transactionId = uuid();\n    this.currentTransactionIds.push(transactionId);\n\n    const tracer = this.tracer.withUpdatedContext({ transactionId });\n    tracer.trace('Writing to device', {\n      willMessageBeAcked: !this.writableWithoutResponseCharacteristic,\n    });\n\n    try {\n      const uint8Array = new Uint8Array(buffer);\n      const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset, uint8Array.byteLength);\n      await BleClient.write(\n        this.device.deviceId,\n        currentDeviceService!,\n        this.writableWithResponseCharacteristic.uuid,\n        dataView,\n      );\n      tracer.withType('ble-frame').trace(`=> ${buffer.toString('hex')}`);\n    } catch (error: unknown) {\n      tracer.trace('Error while writing APDU', { error });\n      throw new DisconnectedDeviceDuringOperation(\n        error instanceof Error ? error.message : `${String(error)}`,\n      );\n    }\n  };\n\n  /**\n   * We intentionally do not immediately close a transport connection.\n   * Instead, we queue the disconnect and wait for a future connection to dismiss the event.\n   * This approach prevents unnecessary disconnects and reconnects. We use the isConnected\n   * flag to ensure that we do not trigger a disconnect if the current cached transport has\n   * already been disconnected.\n   * @returns {Promise<void>}\n   */\n  async close(): Promise<void> {\n    const tracer = this.tracer.withUpdatedContext({ function: 'close' });\n    tracer.trace('Closing, queuing a disconnect with a timeout ...');\n\n    let resolve: (value: void | PromiseLike<void>) => void;\n    const disconnectPromise = new Promise<void>((innerResolve) => {\n      resolve = innerResolve;\n    });\n\n    clearDisconnectTimeout(this.id);\n\n    this.disconnectTimeout = setTimeout(() => {\n      tracer.trace('Disconnect timeout has been reached ...');\n      if (this.isConnected) {\n        BleTransport.disconnectDevice(this.id, this.onDisconnect, tracer.getContext())\n          .catch(() => {})\n          .finally(resolve);\n      } else {\n        resolve();\n      }\n    }, BleTransport.disconnectTimeoutMs);\n\n    // The closure will occur no later than 5s, triggered either by disconnection\n    // or the actual response of the apdu.\n    await Promise.race([this.exchangeBusyPromise || Promise.resolve(), disconnectPromise]);\n  }\n}\n\n/**\n * Opens a BLE connection with a given device. Returns a Transport instance.\n *\n * @param deviceOrId\n * @param needsReconnect\n * @param timeoutMs Optional Timeout (in ms) applied during the connection with the device\n * @param context Optional tracing/log context\n * @param injectedDependencies Contains optional injected dependencies used by the transport implementation\n *  - rxjsScheduler: dependency injected RxJS scheduler to control time. Default AsyncScheduler.\n * @returns A BleTransport instance\n */\nasync function open(\n  deviceOrId: Device | string,\n  needsReconnect: boolean,\n  timeoutMs?: number,\n  context?: TraceContext,\n  { rxjsScheduler }: { rxjsScheduler?: SchedulerLike } = {},\n) {\n  const tracer = new LocalTracer(LOG_TYPE, context);\n  let device: Device;\n  tracer.trace(`Opening ${typeof deviceOrId === 'string' ? deviceOrId : deviceOrId.deviceId}`, { needsReconnect });\n  let deviceId: string;\n  // eslint-disable-next-line prefer-const\n  let transport: BleTransport;\n\n  if (typeof deviceOrId === 'string') {\n    deviceId = deviceOrId;\n    if (transportsCache[deviceOrId]) {\n      tracer.trace('Transport in cache, using it');\n      clearDisconnectTimeout(deviceOrId);\n\n      // The cached transport probably has an older trace/log context\n      transportsCache[deviceOrId].setTraceContext(context);\n      return transportsCache[deviceOrId];\n    }\n\n    tracer.trace(`Trying to open device: ${deviceOrId}`);\n    await awaitsBleOn();\n\n    // Returns a list of known devices by their identifiers\n    const devices = (await BleClient.getDevices([deviceOrId]));\n    tracer.trace(`Found ${devices.length} already known device(s) with given id`, { deviceOrId });\n    [device] = devices;\n\n    if (!device) {\n      // Returns a list of the peripherals currently connected to the system\n      // which have discovered services, connected to system doesn't mean\n      // connected to our app, we check that below.\n      const services = (await BleClient.getServices(deviceOrId)).map((it) => it.uuid);\n      const connectedDevices = (await BleClient.getConnectedDevices(services));\n      const connectedDevicesFiltered = connectedDevices.filter((d) => d.deviceId === deviceOrId);\n      tracer.trace(\n        `No known device with given id.\n        Found ${connectedDevicesFiltered.length} devices from already connected devices`,\n        { deviceOrId },\n      );\n      [device] = connectedDevicesFiltered;\n    }\n\n    if (!device) {\n      // We still don't have a device, so we attempt to connect to it.\n      tracer.trace('No known nor connected devices with given id. Trying to connect to device', {\n        deviceOrId,\n        timeoutMs,\n      });\n\n      // Nb ConnectionOptions dropped since it's not used internally by ble-plx.\n      try {\n        await BleClient.connect(deviceOrId, () => {\n          transport.onDisconnect?.();\n        }, {\n          timeout: timeoutMs,\n        });\n      } catch (e: any) {\n        tracer.trace(`Error code: ${e.errorCode}`);\n        throw e;\n      }\n    }\n\n    if (!device) {\n      throw new CantOpenDevice();\n    }\n  } else {\n    // It was already a Device\n    device = deviceOrId;\n    deviceId = deviceOrId.deviceId;\n  }\n\n  const connectedDevices = await BleClient.getConnectedDevices(getBluetoothServiceUuids());\n\n  if (!connectedDevices.find((it) => it.deviceId === deviceId)) {\n    tracer.trace('Device found but not connected. connecting...', { timeoutMs, connectOptions });\n    try {\n      await BleClient.connect(deviceId, () => {\n        transport.onDisconnect?.();\n      }, {\n        timeout: timeoutMs,\n      });\n    } catch (error: any) {\n      tracer.trace('Connect error', { error });\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw remapError(error);\n    }\n  }\n\n  tracer.trace('Device is connected now, getting services and characteristics');\n\n  let services: BleService[] = [];\n\n  await BleClient.discoverServices(deviceId);\n  services = (await BleClient.getServices(deviceId));\n\n  let res: BluetoothInfos | undefined = retrieveInfos(device);\n  const characteristics: BleCharacteristic[] = [];\n\n  if (!res) {\n    for (const serviceUUID of getBluetoothServiceUuids()) {\n      try {\n        const deviceService = services.find((it) => it.uuid === serviceUUID);\n        res = getInfosForServiceUuid(serviceUUID);\n        if (res && deviceService) {\n          characteristics.push(...deviceService.characteristics);\n          currentDeviceService = res.serviceUuid;\n          break;\n        }\n      } catch (e) {\n        // Attempt to connect to the next service\n      }\n    }\n  }\n\n  if (!res) {\n    tracer.trace('Service not found');\n    throw new TransportError('service not found', 'BLEServiceNotFound');\n  }\n\n  const {\n    deviceModel, writeUuid, writeCmdUuid, notifyUuid,\n  } = res;\n\n  /* if (!characteristics) {\n    characteristics = await device.characteristicsForService(serviceUuid);\n  } */\n\n  if (!characteristics) {\n    tracer.trace('Characteristics not found');\n    throw new TransportError('service not found', 'BLEServiceNotFound');\n  }\n\n  let writableWithResponseCharacteristic: Characteristic | null | undefined;\n  let writableWithoutResponseCharacteristic: Characteristic | undefined;\n  // A characteristic that can monitor value changes\n  let notifiableCharacteristic: Characteristic | null | undefined;\n\n  for (const c of characteristics) {\n    if (c.uuid === writeUuid) {\n      writableWithResponseCharacteristic = c;\n    } else if (c.uuid === writeCmdUuid) {\n      writableWithoutResponseCharacteristic = c;\n    } else if (c.uuid === notifyUuid) {\n      notifiableCharacteristic = c;\n    }\n  }\n\n  if (!writableWithResponseCharacteristic) {\n    throw new TransportError('write characteristic not found', 'BLECharacteristicNotFound');\n  }\n\n  if (!notifiableCharacteristic) {\n    throw new TransportError('notify characteristic not found', 'BLECharacteristicNotFound');\n  }\n\n  if (!writableWithResponseCharacteristic.properties.write) {\n    throw new TransportError(\n      'The writable-with-response characteristic is not writable with response',\n      'BLECharacteristicInvalid',\n    );\n  }\n\n  if (!notifiableCharacteristic.properties.notify) {\n    throw new TransportError('notify characteristic not notifiable', 'BLECharacteristicInvalid');\n  }\n\n  if (writableWithoutResponseCharacteristic) {\n    if (!writableWithoutResponseCharacteristic.properties.writeWithoutResponse) {\n      throw new TransportError(\n        'The writable-without-response characteristic is not writable without response',\n        'BLECharacteristicInvalid',\n      );\n    }\n  }\n\n  const deviceMtu = await BleClient.getMtu(device.deviceId);\n  tracer.trace(`device.mtu=${deviceMtu}`);\n\n  // Inits the observable that will emit received data from the device via BLE\n  const notifyObservable = monitorCharacteristic(deviceId,\n    currentDeviceService!,\n    notifiableCharacteristic,\n    context).pipe(\n    catchError((e) => {\n      // LL-9033 fw 2.0.2 introduced this case, we silence the inner unhandled error.\n      // It will be handled when negotiating the MTU in `inferMTU` but will be ignored in other cases.\n      const msg = String(e);\n      return msg.includes('notify change failed')\n        ? of(new PairingFailed(msg))\n        : throwError(() => e);\n    }),\n    tap((value) => {\n      if (value instanceof PairingFailed) return;\n      trace({ type: 'ble-frame', message: `<= ${value.toString('hex')}`, context });\n    }),\n    // Returns a new Observable that multicasts (shares) the original Observable.\n    // As long as there is at least one Subscriber this Observable will be subscribed and emitting data.\n    share(),\n  );\n\n  // Keeps the input from the device observable alive (multicast observable)\n  const notif = notifyObservable.subscribe();\n\n  transport = new BleTransport(\n    device,\n    writableWithResponseCharacteristic,\n    writableWithoutResponseCharacteristic,\n    notifyObservable,\n    deviceModel,\n    {\n      context,\n      rxjsScheduler,\n    },\n  );\n  tracer.trace('New BleTransport created');\n\n  // Keeping it as a comment for now but if no new bluetooth issues occur, we will be able to remove it\n  // await transport.requestConnectionPriority(\"High\");\n\n  // let disconnectedSub: Subscription;\n\n  // Callbacks on `react-native-ble-plx` notifying the device has been disconnected\n  transport.onDisconnect = (error?: Error) => {\n    transport.isConnected = false;\n    transport.notYetDisconnected = false;\n    notif.unsubscribe();\n    // disconnectedSub?.remove();\n\n    clearDisconnectTimeout(transport.id);\n    delete transportsCache[transport.id];\n    tracer.trace(\n      `On device disconnected callback: cleared cached transport for ${transport.id},\n      emitting Transport event \"disconnect. Error: ${error}\"`,\n      { reason: error },\n    );\n    transport.emit('disconnect', error);\n    transport.disconnectCallback?.();\n  };\n\n  transportsCache[transport.id] = transport;\n  const beforeMTUTime = Date.now();\n\n  /* disconnectedSub = device.onDisconnected((e) => {\n    if (!transport.notYetDisconnected) return;\n    onDisconnect(e);\n  }); */\n\n  try {\n    await transport.inferMTU();\n  } finally {\n    const afterMTUTime = Date.now();\n\n    if (reconnectionConfig) {\n      // Refer to ledgerjs archived repo issue #279.\n      // All HW .v1 LNX have a bug that prevents us from communicating with the device right after pairing.\n      // When we connect for the first time we issue a disconnect and reconnect, this guarantees that we are\n      // in a good state. This is avoidable in some key scenarios ↓\n      if (afterMTUTime - beforeMTUTime < reconnectionConfig.pairingThreshold) {\n        needsReconnect = false;\n      } else if (deviceModel.id === DeviceModelId.stax) {\n        tracer.trace('Skipping \"needsReconnect\" strategy for Stax');\n        needsReconnect = false;\n      }\n\n      if (needsReconnect) {\n        tracer.trace('Device needs reconnection. Triggering a disconnect');\n        await BleTransport.disconnectDevice(transport.id, transport.onDisconnect);\n        await delay(reconnectionConfig.delayAfterFirstPairing);\n      }\n    } else {\n      needsReconnect = false;\n    }\n  }\n\n  if (needsReconnect) {\n    tracer.trace('Reconnecting');\n    return open(device, false, timeoutMs, context);\n  }\n\n  return transport;\n}\n","import { BleClient } from '@capacitor-community/bluetooth-le';\nimport type { Subscription as TransportSubscription } from '@ledgerhq/hw-transport';\nimport { v4 as uuid } from 'uuid';\nimport type { BleDevice } from '@capacitor-community/bluetooth-le/dist/esm/definitions';\n\nimport { IS_CAPACITOR } from '../../config';\nimport BleTransport from '../../lib/ledger-hw-transport-ble/BleTransport';\nimport { logDebug, logDebugError } from '../logs';\nimport { pause } from '../schedulers';\nimport { IS_ANDROID, IS_IOS } from '../windowEnvironment';\nimport { DEVICE_DETECT_ATTEMPTS, PAUSE } from './constants';\n\ninterface ScannedDevice {\n  identifier: string;\n  device: BleDevice;\n}\n\nexport interface LedgerConnection {\n  device: BleDevice;\n  bleTransport: BleTransport;\n}\n\nlet isBleInitialized = false;\nlet bleInitializationPromise: Promise<void> | undefined;\n\nlet listeningSubscription: TransportSubscription | undefined;\n\nlet scannedDevices: ScannedDevice[] = [];\nlet pairedDevice: LedgerConnection | undefined;\nlet onLedgerConnected: ((connection: LedgerConnection) => void) | undefined;\n\nfunction isConnecting() {\n  return !!listeningSubscription;\n}\n\nfunction scannedDeviceIsValidYet(scannedDevice: ScannedDevice): boolean {\n  if (!scannedDevices.find((it) => it.identifier === scannedDevice.identifier)) {\n    // List is already cleared\n    return false;\n  }\n\n  // A device is already paired\n  return !pairedDevice;\n}\n\nasync function tryConnectingLedgerDevice(scannedDevice: ScannedDevice) {\n  try {\n    // Check if stopped before retry\n    if (!scannedDeviceIsValidYet(scannedDevice)) return;\n\n    const bleTransport = await BleTransport.open(scannedDevice.device);\n    // Check if stopped before connection establish\n    if (!scannedDeviceIsValidYet(scannedDevice)) return;\n\n    const ledgerConnection = {\n      device: scannedDevice.device,\n      bleTransport,\n    };\n    pairedDevice = ledgerConnection;\n\n    bleTransport.disconnectCallback = () => {\n      pairedDevice = undefined;\n      if (isConnecting()) {\n        stop();\n        void start();\n      }\n    };\n\n    setTimeout(() => {\n      // Make sure not disconnected yet\n      if (pairedDevice?.device.deviceId === ledgerConnection.device.deviceId) {\n        onLedgerConnected?.(ledgerConnection);\n        stop();\n      } else if (isConnecting()) {\n        // Unexpectedly, disconnected before calling the callback, restart!\n        pairedDevice = undefined;\n        stop();\n        void start();\n      }\n    }, 1000);\n  } catch (error) {\n    setTimeout(() => {\n      void tryConnectingLedgerDevice(scannedDevice);\n    }, 10000);\n  }\n}\n\nasync function isSupported() {\n  if (!IS_CAPACITOR) return false;\n\n  let isEnabled = false;\n  try {\n    await ensureBleInitialized();\n    if (IS_ANDROID) {\n      await BleClient.requestEnable();\n    }\n\n    isEnabled = await BleClient.isEnabled();\n    logDebug('BLE isSupported result', { isEnabled });\n  } catch (err: any) {\n    logDebugError('Error while checking BLE availability', err);\n  }\n\n  return isEnabled;\n}\n\nasync function start() {\n  await ensureBleInitialized();\n\n  listeningSubscription = BleTransport.listen({\n    next: (event: { type: string; device?: BleDevice }) => {\n      switch (event.type) {\n        case 'add':\n          if (event.device) {\n            if (!event.device.name) return;\n            if (scannedDevices.find((it) => it.device.deviceId === event.device?.deviceId)) return;\n            const scannedDevice = { identifier: uuid(), device: event.device };\n            scannedDevices.push(scannedDevice);\n            void tryConnectingLedgerDevice(scannedDevice);\n          }\n          break;\n      }\n    },\n    error: () => {\n      stop();\n    },\n    complete: () => {\n      stop();\n    },\n  });\n}\n\nfunction stop() {\n  scannedDevices = [];\n  listeningSubscription?.unsubscribe();\n  listeningSubscription = undefined;\n}\n\nfunction connect(): Promise<LedgerConnection> {\n  return new Promise((resolve) => {\n    onLedgerConnected = resolve;\n    if (pairedDevice) {\n      onLedgerConnected(pairedDevice);\n      return;\n    }\n\n    if (isConnecting()) return;\n    void start();\n  });\n}\n\nasync function openSettings() {\n  if (IS_ANDROID) {\n    await BleClient.openBluetoothSettings();\n  } else if (IS_IOS) {\n    await BleClient.openAppSettings();\n  }\n}\n\nexport const BleConnector = {\n  isSupported,\n  connect,\n  stop,\n  openSettings,\n};\n\nasync function ensureBleInitialized(): Promise<void> {\n  if (isBleInitialized) return;\n  if (bleInitializationPromise) return bleInitializationPromise;\n\n  bleInitializationPromise = (async () => {\n    let attempt = 0;\n    let lastError: Error | undefined;\n\n    while (attempt < DEVICE_DETECT_ATTEMPTS && !isBleInitialized) {\n      try {\n        await BleClient.initialize({\n          androidNeverForLocation: true,\n        });\n        isBleInitialized = true;\n        return;\n      } catch (err: any) {\n        lastError = err;\n\n        logDebugError('BLE initialize attempt failed', err);\n        await pause(PAUSE * attempt);\n      }\n\n      attempt += 1;\n    }\n\n    if (!isBleInitialized) {\n      throw lastError ?? new Error('BLE initialize failed');\n    }\n  })()\n    .finally(() => {\n      bleInitializationPromise = undefined;\n    });\n\n  return bleInitializationPromise;\n}\n"],"names":["BluetoothLe","BluetoothRequired","awaitsBleOn","initialize","isEnabled","state","BleClient","LocalTracer","Observable","LOG_TYPE","monitorCharacteristic","deviceId","serviceId","characteristic","context","o","tracer","trace","characteristicUuid","uuid","startNotifications","value","uint8Array","Uint8Array","buffer","Buffer","from","next","stopEnabledNotifications","DisconnectedDevice","remapError","error","message","includes","rethrowError","e","Error","decoratePromiseErrors","promise","catch","ConnectionPriority","DeviceModelId","getBluetoothServiceUuids","getInfosForServiceUuid","receiveAPDU","sendAPDU","CantOpenDevice","DisconnectedDeviceDuringOperation","PairingFailed","TransportError","TransportExchangeTimeoutError","Transport","defer","firstValueFrom","merge","of","throwError","TimeoutError","catchError","finalize","first","ignoreElements","map","share","tap","timeout","v4","reconnectionConfig","pairingThreshold","delayAfterFirstPairing","bluetoothInfoCache","retrieveInfos","device","uuids","undefined","serviceUUID","infos","delay","ms","Promise","success","setTimeout","transportsCache","connectOptions","requestMTU","connectionPriority","clearDisconnectTimeout","cachedTransport","disconnectTimeout","type","clearTimeout","currentDeviceService","BleTransport","disconnectTimeoutMs","list","listen","observer","unsubscribed","getConnectedDevices","then","devices","it","stopLEScan","requestLEScan","services","result","unsubscribe","open","deviceOrId","timeoutMs","rxjsScheduler","arguments","length","disconnectDevice","id","onDisconnect","disconnect","withType","deviceModel","isConnected","mtuSize","notifyObservable","notYetDisconnected","writableWithResponseCharacteristic","writableWithoutResponseCharacteristic","currentTransactionIds","disconnectCallback","constructor","logType","exchange","_this","abortTimeoutMs","exchangeBusyPromise","withUpdatedContext","function","toString","exchangeAtomicImpl","pipe","data","getContext","write","transactionIds","cancelPendingOperations","mappedError","clearCurrentTransactionIds","inferMTU","mtu","getMtu","currentDeviceMtu","maybeError","readUInt8","requestConnectionPriority","connectionPriorityMapped","CONNECTION_PRIORITY_BALANCED","CONNECTION_PRIORITY_LOW_POWER","transactionId","push","willMessageBeAcked","dataView","DataView","byteOffset","byteLength","String","close","resolve","disconnectPromise","innerResolve","finally","race","needsReconnect","transport","setTraceContext","getDevices","getServices","connectedDevices","connectedDevicesFiltered","filter","d","connect","_transport$onDisconne","_transport","call","errorCode","find","_transport$onDisconne2","_transport2","discoverServices","res","characteristics","deviceService","serviceUuid","writeUuid","writeCmdUuid","notifyUuid","notifiableCharacteristic","c","properties","notify","writeWithoutResponse","deviceMtu","msg","notif","subscribe","_transport$disconnect","_transport3","reason","emit","beforeMTUTime","Date","now","afterMTUTime","stax","IS_CAPACITOR","logDebug","logDebugError","pause","IS_ANDROID","IS_IOS","DEVICE_DETECT_ATTEMPTS","PAUSE","isBleInitialized","bleInitializationPromise","listeningSubscription","scannedDevices","pairedDevice","onLedgerConnected","isConnecting","scannedDeviceIsValidYet","scannedDevice","identifier","tryConnectingLedgerDevice","bleTransport","ledgerConnection","stop","start","_pairedDevice","_onLedgerConnected","isSupported","ensureBleInitialized","requestEnable","err","event","name","_event$device","complete","_listeningSubscriptio","openSettings","openBluetoothSettings","openAppSettings","BleConnector","attempt","lastError","androidNeverForLocation"],"sourceRoot":""}