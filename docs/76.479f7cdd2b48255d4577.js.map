{"version":3,"file":"76.479f7cdd2b48255d4577.js","mappings":"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","sources":["webpack://mytonwallet/./node_modules/@ledgerhq/logs/lib-es/index.js","webpack://mytonwallet/./node_modules/@ledgerhq/errors/lib-es/helpers.js","webpack://mytonwallet/./node_modules/@ledgerhq/errors/lib-es/index.js","webpack://mytonwallet/./node_modules/@ton-community/ton-ledger/dist/index.js","webpack://mytonwallet/./src/util/ledger/utils.ts","webpack://mytonwallet/./src/api/common/ledger.ts","webpack://mytonwallet/./src/api/chains/ton/util/ledger.ts","webpack://mytonwallet/./src/util/compareVersions.ts"],"sourcesContent":["let id = 0;\nconst subscribers = [];\n/**\n * Logs something\n *\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\nexport const log = (type, message, data) => {\n    const obj = {\n        type,\n        id: String(++id),\n        date: new Date(),\n    };\n    if (message)\n        obj.message = message;\n    if (data)\n        obj.data = data;\n    dispatch(obj);\n};\n/**\n * A simple tracer function, only expanding the existing log function\n *\n * Its goal is to capture more context than a log function.\n * This is simple for now, but can be improved later.\n *\n * @param context Anything representing the context where the log occurred\n */\nexport const trace = ({ type, message, data, context, }) => {\n    const obj = {\n        type,\n        id: String(++id),\n        date: new Date(),\n    };\n    if (message)\n        obj.message = message;\n    if (data)\n        obj.data = data;\n    if (context)\n        obj.context = context;\n    dispatch(obj);\n};\n/**\n * A simple tracer class, that can be used to avoid repetition when using the `trace` function\n *\n * Its goal is to capture more context than a log function.\n * This is simple for now, but can be improved later.\n *\n * @param type A given type (not level) for the current local tracer (\"hw\", \"withDevice\", etc.)\n * @param context Anything representing the context where the log occurred\n */\nexport class LocalTracer {\n    constructor(type, context) {\n        this.type = type;\n        this.context = context;\n    }\n    trace(message, data) {\n        trace({\n            type: this.type,\n            message,\n            data,\n            context: this.context,\n        });\n    }\n    getContext() {\n        return this.context;\n    }\n    setContext(context) {\n        this.context = context;\n    }\n    updateContext(contextToAdd) {\n        this.context = Object.assign(Object.assign({}, this.context), contextToAdd);\n    }\n    getType() {\n        return this.type;\n    }\n    setType(type) {\n        this.type = type;\n    }\n    /**\n     * Create a new instance of the LocalTracer with an updated `type`\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     */\n    withType(type) {\n        return new LocalTracer(type, this.context);\n    }\n    /**\n     * Create a new instance of the LocalTracer with a new `context`\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     *\n     * @param context A TraceContext, that can undefined to reset the context\n     */\n    withContext(context) {\n        return new LocalTracer(this.type, context);\n    }\n    /**\n     * Create a new instance of the LocalTracer with an updated `context`,\n     * on which an additional context is merged with the existing one.\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     */\n    withUpdatedContext(contextToAdd) {\n        return new LocalTracer(this.type, Object.assign(Object.assign({}, this.context), contextToAdd));\n    }\n}\n/**\n * Adds a subscribers to the emitted logs.\n *\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\nexport const listen = (cb) => {\n    subscribers.push(cb);\n    return () => {\n        const i = subscribers.indexOf(cb);\n        if (i !== -1) {\n            // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n            subscribers[i] = subscribers[subscribers.length - 1];\n            subscribers.pop();\n        }\n    };\n};\nfunction dispatch(log) {\n    for (let i = 0; i < subscribers.length; i++) {\n        try {\n            subscribers[i](log);\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n}\nif (typeof window !== \"undefined\") {\n    window.__ledgerLogsListen = listen;\n}\n//# sourceMappingURL=index.js.map","/* eslint-disable no-continue */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-prototype-builtins */\nconst errorClasses = {};\nconst deserializers = {};\nexport const addCustomErrorDeserializer = (name, deserializer) => {\n    deserializers[name] = deserializer;\n};\nexport const createCustomErrorClass = (name) => {\n    class CustomErrorClass extends Error {\n        constructor(message, fields, options) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            super(message || name, options);\n            // Set the prototype explicitly. See https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n            Object.setPrototypeOf(this, CustomErrorClass.prototype);\n            this.name = name;\n            if (fields) {\n                for (const k in fields) {\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    this[k] = fields[k];\n                }\n            }\n            if (options && isObject(options) && \"cause\" in options && !(\"cause\" in this)) {\n                // .cause was specified but the superconstructor\n                // did not create an instance property.\n                const cause = options.cause;\n                this.cause = cause;\n                if (\"stack\" in cause) {\n                    this.stack = this.stack + \"\\nCAUSE: \" + cause.stack;\n                }\n            }\n        }\n    }\n    errorClasses[name] = CustomErrorClass;\n    return CustomErrorClass;\n};\nfunction isObject(value) {\n    return typeof value === \"object\";\n}\n// inspired from https://github.com/programble/errio/blob/master/index.js\nexport const deserializeError = (object) => {\n    if (object && typeof object === \"object\") {\n        try {\n            if (typeof object.message === \"string\") {\n                const msg = JSON.parse(object.message);\n                if (msg.message && msg.name) {\n                    object = msg;\n                }\n            }\n        }\n        catch (e) {\n            // nothing\n        }\n        let error;\n        if (typeof object.name === \"string\") {\n            const { name } = object;\n            const des = deserializers[name];\n            if (des) {\n                error = des(object);\n            }\n            else {\n                let constructor = name === \"Error\" ? Error : errorClasses[name];\n                if (!constructor) {\n                    console.warn(\"deserializing an unknown class '\" + name + \"'\");\n                    constructor = createCustomErrorClass(name);\n                }\n                error = Object.create(constructor.prototype);\n                try {\n                    for (const prop in object) {\n                        if (object.hasOwnProperty(prop)) {\n                            error[prop] = object[prop];\n                        }\n                    }\n                }\n                catch (e) {\n                    // sometimes setting a property can fail (e.g. .name)\n                }\n            }\n        }\n        else {\n            if (typeof object.message === \"string\") {\n                error = new Error(object.message);\n            }\n        }\n        if (error && !error.stack && Error.captureStackTrace) {\n            Error.captureStackTrace(error, deserializeError);\n        }\n        return error;\n    }\n    return new Error(String(object));\n};\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\nexport const serializeError = (value) => {\n    if (!value)\n        return value;\n    if (typeof value === \"object\") {\n        return destroyCircular(value, []);\n    }\n    if (typeof value === \"function\") {\n        return `[Function: ${value.name || \"anonymous\"}]`;\n    }\n    return value;\n};\n// https://www.npmjs.com/package/destroy-circular\nfunction destroyCircular(from, seen) {\n    const to = {};\n    seen.push(from);\n    for (const key of Object.keys(from)) {\n        const value = from[key];\n        if (typeof value === \"function\") {\n            continue;\n        }\n        if (!value || typeof value !== \"object\") {\n            to[key] = value;\n            continue;\n        }\n        if (seen.indexOf(from[key]) === -1) {\n            to[key] = destroyCircular(from[key], seen.slice(0));\n            continue;\n        }\n        to[key] = \"[Circular]\";\n    }\n    if (typeof from.name === \"string\") {\n        to.name = from.name;\n    }\n    if (typeof from.message === \"string\") {\n        to.message = from.message;\n    }\n    if (typeof from.stack === \"string\") {\n        to.stack = from.stack;\n    }\n    return to;\n}\n//# sourceMappingURL=helpers.js.map","import { serializeError, deserializeError, createCustomErrorClass, addCustomErrorDeserializer, } from \"./helpers\";\nexport { serializeError, deserializeError, createCustomErrorClass, addCustomErrorDeserializer };\nexport const AccountNameRequiredError = createCustomErrorClass(\"AccountNameRequired\");\nexport const AccountNotSupported = createCustomErrorClass(\"AccountNotSupported\");\nexport const AccountAwaitingSendPendingOperations = createCustomErrorClass(\"AccountAwaitingSendPendingOperations\");\nexport const AmountRequired = createCustomErrorClass(\"AmountRequired\");\nexport const BluetoothRequired = createCustomErrorClass(\"BluetoothRequired\");\nexport const BtcUnmatchedApp = createCustomErrorClass(\"BtcUnmatchedApp\");\nexport const CantOpenDevice = createCustomErrorClass(\"CantOpenDevice\");\nexport const CashAddrNotSupported = createCustomErrorClass(\"CashAddrNotSupported\");\nexport const ClaimRewardsFeesWarning = createCustomErrorClass(\"ClaimRewardsFeesWarning\");\nexport const CurrencyNotSupported = createCustomErrorClass(\"CurrencyNotSupported\");\nexport const DeviceAppVerifyNotSupported = createCustomErrorClass(\"DeviceAppVerifyNotSupported\");\nexport const DeviceGenuineSocketEarlyClose = createCustomErrorClass(\"DeviceGenuineSocketEarlyClose\");\nexport const DeviceNotGenuineError = createCustomErrorClass(\"DeviceNotGenuine\");\nexport const DeviceOnDashboardExpected = createCustomErrorClass(\"DeviceOnDashboardExpected\");\nexport const DeviceOnDashboardUnexpected = createCustomErrorClass(\"DeviceOnDashboardUnexpected\");\nexport const DeviceInOSUExpected = createCustomErrorClass(\"DeviceInOSUExpected\");\nexport const DeviceHalted = createCustomErrorClass(\"DeviceHalted\");\nexport const DeviceNameInvalid = createCustomErrorClass(\"DeviceNameInvalid\");\nexport const DeviceSocketFail = createCustomErrorClass(\"DeviceSocketFail\");\nexport const DeviceSocketNoBulkStatus = createCustomErrorClass(\"DeviceSocketNoBulkStatus\");\nexport const DeviceNeedsRestart = createCustomErrorClass(\"DeviceSocketNoBulkStatus\");\nexport const UnresponsiveDeviceError = createCustomErrorClass(\"UnresponsiveDeviceError\");\nexport const DisconnectedDevice = createCustomErrorClass(\"DisconnectedDevice\");\nexport const DisconnectedDeviceDuringOperation = createCustomErrorClass(\"DisconnectedDeviceDuringOperation\");\nexport const DeviceExtractOnboardingStateError = createCustomErrorClass(\"DeviceExtractOnboardingStateError\");\nexport const DeviceOnboardingStatePollingError = createCustomErrorClass(\"DeviceOnboardingStatePollingError\");\nexport const EnpointConfigError = createCustomErrorClass(\"EnpointConfig\");\nexport const EthAppPleaseEnableContractData = createCustomErrorClass(\"EthAppPleaseEnableContractData\");\nexport const FeeEstimationFailed = createCustomErrorClass(\"FeeEstimationFailed\");\nexport const FirmwareNotRecognized = createCustomErrorClass(\"FirmwareNotRecognized\");\nexport const HardResetFail = createCustomErrorClass(\"HardResetFail\");\nexport const InvalidXRPTag = createCustomErrorClass(\"InvalidXRPTag\");\nexport const InvalidAddress = createCustomErrorClass(\"InvalidAddress\");\nexport const InvalidNonce = createCustomErrorClass(\"InvalidNonce\");\nexport const InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass(\"InvalidAddressBecauseDestinationIsAlsoSource\");\nexport const LatestMCUInstalledError = createCustomErrorClass(\"LatestMCUInstalledError\");\nexport const UnknownMCU = createCustomErrorClass(\"UnknownMCU\");\nexport const LedgerAPIError = createCustomErrorClass(\"LedgerAPIError\");\nexport const LedgerAPIErrorWithMessage = createCustomErrorClass(\"LedgerAPIErrorWithMessage\");\nexport const LedgerAPINotAvailable = createCustomErrorClass(\"LedgerAPINotAvailable\");\nexport const ManagerAppAlreadyInstalledError = createCustomErrorClass(\"ManagerAppAlreadyInstalled\");\nexport const ManagerAppRelyOnBTCError = createCustomErrorClass(\"ManagerAppRelyOnBTC\");\nexport const ManagerAppDepInstallRequired = createCustomErrorClass(\"ManagerAppDepInstallRequired\");\nexport const ManagerAppDepUninstallRequired = createCustomErrorClass(\"ManagerAppDepUninstallRequired\");\nexport const ManagerDeviceLockedError = createCustomErrorClass(\"ManagerDeviceLocked\");\nexport const ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass(\"ManagerFirmwareNotEnoughSpace\");\nexport const ManagerNotEnoughSpaceError = createCustomErrorClass(\"ManagerNotEnoughSpace\");\nexport const ManagerUninstallBTCDep = createCustomErrorClass(\"ManagerUninstallBTCDep\");\nexport const NetworkDown = createCustomErrorClass(\"NetworkDown\");\nexport const NetworkError = createCustomErrorClass(\"NetworkError\");\nexport const NoAddressesFound = createCustomErrorClass(\"NoAddressesFound\");\nexport const NotEnoughBalance = createCustomErrorClass(\"NotEnoughBalance\");\nexport const NotEnoughBalanceSwap = createCustomErrorClass(\"NotEnoughBalanceSwap\");\nexport const NotEnoughBalanceToDelegate = createCustomErrorClass(\"NotEnoughBalanceToDelegate\");\nexport const NotEnoughBalanceInParentAccount = createCustomErrorClass(\"NotEnoughBalanceInParentAccount\");\nexport const NotEnoughSpendableBalance = createCustomErrorClass(\"NotEnoughSpendableBalance\");\nexport const NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass(\"NotEnoughBalanceBecauseDestinationNotCreated\");\nexport const NoAccessToCamera = createCustomErrorClass(\"NoAccessToCamera\");\nexport const NotEnoughGas = createCustomErrorClass(\"NotEnoughGas\");\n// Error message specifically for the PTX swap flow\nexport const NotEnoughGasSwap = createCustomErrorClass(\"NotEnoughGasSwap\");\nexport const TronEmptyAccount = createCustomErrorClass(\"TronEmptyAccount\");\nexport const MaybeKeepTronAccountAlive = createCustomErrorClass(\"MaybeKeepTronAccountAlive\");\nexport const NotSupportedLegacyAddress = createCustomErrorClass(\"NotSupportedLegacyAddress\");\nexport const GasLessThanEstimate = createCustomErrorClass(\"GasLessThanEstimate\");\nexport const PriorityFeeTooLow = createCustomErrorClass(\"PriorityFeeTooLow\");\nexport const PriorityFeeTooHigh = createCustomErrorClass(\"PriorityFeeTooHigh\");\nexport const PriorityFeeHigherThanMaxFee = createCustomErrorClass(\"PriorityFeeHigherThanMaxFee\");\nexport const MaxFeeTooLow = createCustomErrorClass(\"MaxFeeTooLow\");\nexport const PasswordsDontMatchError = createCustomErrorClass(\"PasswordsDontMatch\");\nexport const PasswordIncorrectError = createCustomErrorClass(\"PasswordIncorrect\");\nexport const RecommendSubAccountsToEmpty = createCustomErrorClass(\"RecommendSubAccountsToEmpty\");\nexport const RecommendUndelegation = createCustomErrorClass(\"RecommendUndelegation\");\nexport const TimeoutTagged = createCustomErrorClass(\"TimeoutTagged\");\nexport const UnexpectedBootloader = createCustomErrorClass(\"UnexpectedBootloader\");\nexport const MCUNotGenuineToDashboard = createCustomErrorClass(\"MCUNotGenuineToDashboard\");\nexport const RecipientRequired = createCustomErrorClass(\"RecipientRequired\");\nexport const UnavailableTezosOriginatedAccountReceive = createCustomErrorClass(\"UnavailableTezosOriginatedAccountReceive\");\nexport const UnavailableTezosOriginatedAccountSend = createCustomErrorClass(\"UnavailableTezosOriginatedAccountSend\");\nexport const UpdateFetchFileFail = createCustomErrorClass(\"UpdateFetchFileFail\");\nexport const UpdateIncorrectHash = createCustomErrorClass(\"UpdateIncorrectHash\");\nexport const UpdateIncorrectSig = createCustomErrorClass(\"UpdateIncorrectSig\");\nexport const UpdateYourApp = createCustomErrorClass(\"UpdateYourApp\");\nexport const UserRefusedDeviceNameChange = createCustomErrorClass(\"UserRefusedDeviceNameChange\");\nexport const UserRefusedAddress = createCustomErrorClass(\"UserRefusedAddress\");\nexport const UserRefusedFirmwareUpdate = createCustomErrorClass(\"UserRefusedFirmwareUpdate\");\nexport const UserRefusedAllowManager = createCustomErrorClass(\"UserRefusedAllowManager\");\nexport const UserRefusedOnDevice = createCustomErrorClass(\"UserRefusedOnDevice\"); // TODO rename because it's just for transaction refusal\nexport const PinNotSet = createCustomErrorClass(\"PinNotSet\");\nexport const ExpertModeRequired = createCustomErrorClass(\"ExpertModeRequired\");\nexport const TransportOpenUserCancelled = createCustomErrorClass(\"TransportOpenUserCancelled\");\nexport const TransportInterfaceNotAvailable = createCustomErrorClass(\"TransportInterfaceNotAvailable\");\nexport const TransportRaceCondition = createCustomErrorClass(\"TransportRaceCondition\");\nexport const TransportWebUSBGestureRequired = createCustomErrorClass(\"TransportWebUSBGestureRequired\");\nexport const TransactionHasBeenValidatedError = createCustomErrorClass(\"TransactionHasBeenValidatedError\");\nexport const TransportExchangeTimeoutError = createCustomErrorClass(\"TransportExchangeTimeoutError\");\nexport const DeviceShouldStayInApp = createCustomErrorClass(\"DeviceShouldStayInApp\");\nexport const WebsocketConnectionError = createCustomErrorClass(\"WebsocketConnectionError\");\nexport const WebsocketConnectionFailed = createCustomErrorClass(\"WebsocketConnectionFailed\");\nexport const WrongDeviceForAccount = createCustomErrorClass(\"WrongDeviceForAccount\");\nexport const WrongDeviceForAccountPayout = createCustomErrorClass(\"WrongDeviceForAccountPayout\");\nexport const WrongDeviceForAccountRefund = createCustomErrorClass(\"WrongDeviceForAccountRefund\");\nexport const WrongAppForCurrency = createCustomErrorClass(\"WrongAppForCurrency\");\nexport const ETHAddressNonEIP = createCustomErrorClass(\"ETHAddressNonEIP\");\nexport const CantScanQRCode = createCustomErrorClass(\"CantScanQRCode\");\nexport const FeeNotLoaded = createCustomErrorClass(\"FeeNotLoaded\");\nexport const FeeNotLoadedSwap = createCustomErrorClass(\"FeeNotLoadedSwap\");\nexport const FeeRequired = createCustomErrorClass(\"FeeRequired\");\nexport const FeeTooHigh = createCustomErrorClass(\"FeeTooHigh\");\nexport const PendingOperation = createCustomErrorClass(\"PendingOperation\");\nexport const SyncError = createCustomErrorClass(\"SyncError\");\nexport const PairingFailed = createCustomErrorClass(\"PairingFailed\");\nexport const PeerRemovedPairing = createCustomErrorClass(\"PeerRemovedPairing\");\nexport const GenuineCheckFailed = createCustomErrorClass(\"GenuineCheckFailed\");\nexport const LedgerAPI4xx = createCustomErrorClass(\"LedgerAPI4xx\");\nexport const LedgerAPI5xx = createCustomErrorClass(\"LedgerAPI5xx\");\nexport const FirmwareOrAppUpdateRequired = createCustomErrorClass(\"FirmwareOrAppUpdateRequired\");\n// SpeedUp / Cancel EVM tx\nexport const ReplacementTransactionUnderpriced = createCustomErrorClass(\"ReplacementTransactionUnderpriced\");\n// Bitcoin family\nexport const OpReturnDataSizeLimit = createCustomErrorClass(\"OpReturnSizeLimit\");\nexport const DustLimit = createCustomErrorClass(\"DustLimit\");\n// Language\nexport const LanguageNotFound = createCustomErrorClass(\"LanguageNotFound\");\n// db stuff, no need to translate\nexport const NoDBPathGiven = createCustomErrorClass(\"NoDBPathGiven\");\nexport const DBWrongPassword = createCustomErrorClass(\"DBWrongPassword\");\nexport const DBNotReset = createCustomErrorClass(\"DBNotReset\");\nexport const SequenceNumberError = createCustomErrorClass(\"SequenceNumberError\");\nexport const DisabledTransactionBroadcastError = createCustomErrorClass(\"DisabledTransactionBroadcastError\");\n/**\n * Type of a Transport error used to represent all equivalent errors coming from all possible implementation of Transport\n */\nexport var HwTransportErrorType;\n(function (HwTransportErrorType) {\n    HwTransportErrorType[\"Unknown\"] = \"Unknown\";\n    HwTransportErrorType[\"LocationServicesDisabled\"] = \"LocationServicesDisabled\";\n    HwTransportErrorType[\"LocationServicesUnauthorized\"] = \"LocationServicesUnauthorized\";\n    HwTransportErrorType[\"BluetoothScanStartFailed\"] = \"BluetoothScanStartFailed\";\n})(HwTransportErrorType || (HwTransportErrorType = {}));\n/**\n * Represents an error coming from the usage of any Transport implementation.\n *\n * Needed to map a specific implementation error into an error that\n * can be managed by any code unaware of the specific Transport implementation\n * that was used.\n */\nexport class HwTransportError extends Error {\n    constructor(type, message) {\n        super(message);\n        this.name = \"HwTransportError\";\n        this.type = type;\n        // Needed as long as we target < ES6\n        Object.setPrototypeOf(this, HwTransportError.prototype);\n    }\n}\n/**\n * TransportError is used for any generic transport errors.\n * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.\n */\nexport class TransportError extends Error {\n    constructor(message, id) {\n        const name = \"TransportError\";\n        super(message || name);\n        this.name = name;\n        this.message = message;\n        this.stack = new Error(message).stack;\n        this.id = id;\n    }\n}\naddCustomErrorDeserializer(\"TransportError\", e => new TransportError(e.message, e.id));\nexport const StatusCodes = {\n    ACCESS_CONDITION_NOT_FULFILLED: 0x9804,\n    ALGORITHM_NOT_SUPPORTED: 0x9484,\n    CLA_NOT_SUPPORTED: 0x6e00,\n    CODE_BLOCKED: 0x9840,\n    CODE_NOT_INITIALIZED: 0x9802,\n    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,\n    CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,\n    CONTRADICTION_INVALIDATION: 0x9810,\n    CONTRADICTION_SECRET_CODE_STATUS: 0x9808,\n    DEVICE_IN_RECOVERY_MODE: 0x662f,\n    CUSTOM_IMAGE_EMPTY: 0x662e,\n    FILE_ALREADY_EXISTS: 0x6a89,\n    FILE_NOT_FOUND: 0x9404,\n    GP_AUTH_FAILED: 0x6300,\n    HALTED: 0x6faa,\n    INCONSISTENT_FILE: 0x9408,\n    INCORRECT_DATA: 0x6a80,\n    INCORRECT_LENGTH: 0x6700,\n    INCORRECT_P1_P2: 0x6b00,\n    INS_NOT_SUPPORTED: 0x6d00,\n    DEVICE_NOT_ONBOARDED: 0x6d07,\n    DEVICE_NOT_ONBOARDED_2: 0x6611,\n    INVALID_KCV: 0x9485,\n    INVALID_OFFSET: 0x9402,\n    LICENSING: 0x6f42,\n    LOCKED_DEVICE: 0x5515,\n    MAX_VALUE_REACHED: 0x9850,\n    MEMORY_PROBLEM: 0x9240,\n    MISSING_CRITICAL_PARAMETER: 0x6800,\n    NO_EF_SELECTED: 0x9400,\n    NOT_ENOUGH_MEMORY_SPACE: 0x6a84,\n    OK: 0x9000,\n    PIN_REMAINING_ATTEMPTS: 0x63c0,\n    REFERENCED_DATA_NOT_FOUND: 0x6a88,\n    SECURITY_STATUS_NOT_SATISFIED: 0x6982,\n    TECHNICAL_PROBLEM: 0x6f00,\n    UNKNOWN_APDU: 0x6d02,\n    USER_REFUSED_ON_DEVICE: 0x5501,\n    NOT_ENOUGH_SPACE: 0x5102,\n    APP_NOT_FOUND_OR_INVALID_CONTEXT: 0x5123,\n    INVALID_APP_NAME_LENGTH: 0x670a,\n    GEN_AES_KEY_FAILED: 0x5419,\n    INTERNAL_CRYPTO_OPERATION_FAILED: 0x541a,\n    INTERNAL_COMPUTE_AES_CMAC_FAILED: 0x541b,\n    ENCRYPT_APP_STORAGE_FAILED: 0x541c,\n    INVALID_BACKUP_STATE: 0x6642,\n    PIN_NOT_SET: 0x5502,\n    INVALID_BACKUP_LENGTH: 0x6733,\n    INVALID_RESTORE_STATE: 0x6643,\n    INVALID_CHUNK_LENGTH: 0x6734,\n    INVALID_BACKUP_HEADER: 0x684a,\n    // Not documented:\n    TRUSTCHAIN_WRONG_SEED: 0xb007,\n};\nexport function getAltStatusMessage(code) {\n    switch (code) {\n        // improve text of most common errors\n        case 0x6700:\n            return \"Incorrect length\";\n        case 0x6800:\n            return \"Missing critical parameter\";\n        case 0x6982:\n            return \"Security not satisfied (dongle locked or have invalid access rights)\";\n        case 0x6985:\n            return \"Condition of use not satisfied (denied by the user?)\";\n        case 0x6a80:\n            return \"Invalid data received\";\n        case 0x6b00:\n            return \"Invalid parameter received\";\n        case 0x5515:\n            return \"Locked device\";\n    }\n    if (0x6f00 <= code && code <= 0x6fff) {\n        return \"Internal error, please report\";\n    }\n}\n/**\n * Error thrown when a device returned a non success status.\n * the error.statusCode is one of the `StatusCodes` exported by this library.\n */\nexport class TransportStatusError extends Error {\n    /**\n     * @param statusCode The error status code coming from a Transport implementation\n     * @param options containing:\n     *  - canBeMappedToChildError: enable the mapping of TransportStatusError to an error extending/inheriting from it\n     *  . Ex: LockedDeviceError. Default to true.\n     */\n    constructor(statusCode, { canBeMappedToChildError = true } = {}) {\n        const statusText = Object.keys(StatusCodes).find(k => StatusCodes[k] === statusCode) || \"UNKNOWN_ERROR\";\n        const smsg = getAltStatusMessage(statusCode) || statusText;\n        const statusCodeStr = statusCode.toString(16);\n        const message = `Ledger device: ${smsg} (0x${statusCodeStr})`;\n        super(message);\n        this.name = \"TransportStatusError\";\n        this.statusCode = statusCode;\n        this.statusText = statusText;\n        Object.setPrototypeOf(this, TransportStatusError.prototype);\n        // Maps to a LockedDeviceError\n        if (canBeMappedToChildError && statusCode === StatusCodes.LOCKED_DEVICE) {\n            return new LockedDeviceError(message);\n        }\n    }\n}\nexport class LockedDeviceError extends TransportStatusError {\n    constructor(message) {\n        super(StatusCodes.LOCKED_DEVICE, { canBeMappedToChildError: false });\n        if (message) {\n            this.message = message;\n        }\n        this.name = \"LockedDeviceError\";\n        Object.setPrototypeOf(this, LockedDeviceError.prototype);\n    }\n}\naddCustomErrorDeserializer(\"TransportStatusError\", e => new TransportStatusError(e.statusCode));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KNOWN_JETTONS = exports.parseMessage = exports.TonTransport = void 0;\nvar TonTransport_1 = require(\"./TonTransport\");\nObject.defineProperty(exports, \"TonTransport\", { enumerable: true, get: function () { return TonTransport_1.TonTransport; } });\nObject.defineProperty(exports, \"parseMessage\", { enumerable: true, get: function () { return TonTransport_1.parseMessage; } });\nObject.defineProperty(exports, \"KNOWN_JETTONS\", { enumerable: true, get: function () { return TonTransport_1.KNOWN_JETTONS; } });\n","import type { ApiNetwork, ApiTonWallet } from '../../api/types';\n\nimport { WORKCHAIN, Workchain } from '../../api/chains/ton/constants';\n\nconst BROKEN_CONNECTION_ERRORS = new Set(['DisconnectedDeviceDuringOperation', 'TransportRaceCondition']);\n\nexport function getLedgerAccountPathByWallet(network: ApiNetwork, wallet: ApiTonWallet, workchain?: Workchain) {\n  return getLedgerAccountPathByIndex(wallet.index, network !== 'mainnet', workchain);\n}\n\nexport function getLedgerAccountPathByIndex(index: number, isTestnet: boolean, workchain = WORKCHAIN) {\n  const network = isTestnet ? 1 : 0;\n  const chain = workchain === Workchain.MasterChain ? 255 : 0;\n  return [44, 607, network, chain, index, 0];\n}\n\nexport function isLedgerConnectionBroken(error: string) {\n  return BROKEN_CONNECTION_ERRORS.has(error);\n}\n","import Transport from '@ledgerhq/hw-transport';\n\nimport { IS_AIR_APP } from '../../config';\nimport { callWindow } from '../../util/windowProvider/connector';\n\n/**\n * Serialization format differs between web/capacitor and native apps:\n *  - Native (AIR) apps: Use hex format (expected by native Ledger library implementations)\n *  - Web/Capacitor apps: Use base64 format (more efficient for browser message passing)\n */\nconst serializationFormat = IS_AIR_APP ? 'hex' : 'base64';\n\n/**\n * A Ledger's Transport implementation that passes the data to the actual transfer object in the main browser thread\n * (src/util/ledger/index.ts) via postMessage (because actual Ledger transports don't work in worker threads).\n */\nexport class WindowTransport extends Transport {\n  async exchange(apdu: Buffer) {\n    const response = await callWindow('exchangeWithLedger', apdu.toString(serializationFormat));\n    return Buffer.from(response, serializationFormat);\n  }\n}\n","/*\n * This file must be imported dynamically via import().\n * This is needed to reduce the app size when Ledger is not used.\n */\n\nimport { TransportStatusError } from '@ledgerhq/errors';\nimport type { Address, Cell } from '@ton/core';\nimport type { TonPayloadFormat } from '@ton-community/ton-ledger';\nimport { KNOWN_JETTONS, parseMessage, TonTransport } from '@ton-community/ton-ledger';\n\nimport type { ApiTonConnectProof } from '../../../tonConnect/types';\nimport type { ApiNetwork, ApiTonWallet } from '../../../types';\nimport type { ApiTonWalletVersion, PreparedTransactionToSign, TonTransferHints } from '../types';\nimport { ApiHardwareError } from '../../../types';\n\nimport compareVersions from '../../../../util/compareVersions';\nimport { getLedgerAccountPathByWallet } from '../../../../util/ledger/utils';\nimport { logDebug, logDebugError } from '../../../../util/logs';\nimport { WindowTransport } from '../../../common/ledger';\nimport { ATTEMPTS, TRANSFER_TIMEOUT_SEC, WORKCHAIN } from '../constants';\nimport { resolveTokenAddress, toBase64Address } from './tonCore';\n\nexport type LedgerTransactionParams = Parameters<TonTransport['signTransaction']>[1];\n\n// You can use the https://github.com/LedgerHQ/app-ton history as the version support reference\nconst VERSION_WITH_WALLET_SPECIFIERS = '2.1';\nconst VERSION_WITH_JETTON_ID = '2.2';\nconst VERSION_WITH_GET_SETTINGS = '2.1';\nconst VERSION_WITH_PAYLOAD: Record<TonPayloadFormat['type'], string> = {\n  unsafe: '2.1',\n  comment: '0',\n  'jetton-transfer': '0',\n  'nft-transfer': '2.1',\n  'jetton-burn': '2.1',\n  'add-whitelist': '2.1',\n  'single-nominator-withdraw': '2.1',\n  'single-nominator-change-validator': '2.1',\n  'tonstakers-deposit': '2.1',\n  'vote-for-proposal': '2.1',\n  'change-dns-record': '2.1',\n  'token-bridge-pay-swap': '2.1',\n};\n\nconst knownJettonAddresses = Object.fromEntries(\n  KNOWN_JETTONS.map(({ masterAddress }, jettonId) => [\n    toBase64Address(masterAddress, true, 'mainnet'),\n    jettonId,\n  ]),\n);\n\nconst ledgerTransport = new TonTransport(new WindowTransport());\n\n/** Thrown when and only when the Ledger TON app needs to be updated to support this transaction */\nexport const unsupportedError = new Error('Unsupported');\n\nexport const lacksBlindSigningError = new Error('Lacks blind signing');\n\nexport async function signTonProofWithLedger(\n  network: ApiNetwork,\n  wallet: ApiTonWallet,\n  proof: ApiTonConnectProof,\n): Promise<Buffer | { error: ApiHardwareError }> {\n  const accountPath = getLedgerAccountPathByWallet(network, wallet);\n  const { timestamp, domain, payload } = proof;\n\n  try {\n    const result = await ledgerTransport.getAddressProof(accountPath, {\n      domain,\n      timestamp,\n      payload: Buffer.from(payload),\n    });\n    return result.signature;\n  } catch (err) {\n    return handleLedgerError(err);\n  }\n}\n\n/**\n * Signs the given TON transactions using Ledger. Because Ledger can't sign multiple messages at once, each transaction\n * must contain exactly 1 message, and the transactions will be signed one by one. If everything is ok, returns the\n * signed transactions in the same order as the input transactions.\n */\nexport async function signTonTransactionsWithLedger(\n  network: ApiNetwork,\n  wallet: ApiTonWallet,\n  tonTransactions: PreparedTransactionToSign[],\n  subwalletId?: number,\n  maxRetries = ATTEMPTS,\n): Promise<Cell[] | { error: ApiHardwareError }> {\n  const accountPath = getLedgerAccountPathByWallet(network, wallet);\n  const ledgerVersion = await ledgerTransport.getVersion();\n  const isBlindSigningEnabled = await getIsBlindSigningEnabled(ledgerVersion);\n  let ledgerTransactions: LedgerTransactionParams[];\n\n  // To improve the UX, making sure all the transactions are signable before asking the user to sign them\n  try {\n    ledgerTransactions = await Promise.all(tonTransactions.map((tonTransaction) => (\n      tonTransactionToLedgerTransaction(\n        network,\n        wallet.version,\n        tonTransaction,\n        ledgerVersion,\n        isBlindSigningEnabled,\n        subwalletId,\n      )\n    )));\n  } catch (err) {\n    if (err === unsupportedError) return { error: ApiHardwareError.HardwareOutdated };\n    if (err === lacksBlindSigningError) return { error: ApiHardwareError.BlindSigningNotEnabled };\n    throw err;\n  }\n\n  return signLedgerTransactionsWithRetry(accountPath, ledgerTransactions, maxRetries);\n}\n\nasync function getIsBlindSigningEnabled(ledgerVersion: string) {\n  if (!doesSupport(ledgerVersion, VERSION_WITH_GET_SETTINGS)) {\n    return true; // If Ledger actually doesn't allow blind signing, it will throw an error later\n  }\n\n  const { blindSigningEnabled } = await ledgerTransport.getSettings();\n  return blindSigningEnabled;\n}\n\n/**\n * Converts a transaction, that you would pass to `TonWallet.createTransfer`, to the format suitable for Ledger's\n * `TonTransport.signTransaction`.\n *\n * Exported for tests only.\n */\nexport async function tonTransactionToLedgerTransaction(\n  network: ApiNetwork,\n  walletVersion: ApiTonWalletVersion,\n  tonTransaction: PreparedTransactionToSign,\n  ledgerVersion: string,\n  isBlindSigningEnabled: boolean,\n  subwalletId?: number,\n): Promise<LedgerTransactionParams> {\n  const { authType = 'external', sendMode = 0, seqno, timeout, hints } = tonTransaction;\n  const message = getMessageFromTonTransaction(tonTransaction);\n\n  if (authType !== 'external') {\n    throw new Error(`Unsupported transaction authType \"${authType}\"`);\n  }\n  if (message.info.type !== 'internal') {\n    throw new Error(`Unsupported message type \"${message.info.type}\"`);\n  }\n\n  return {\n    to: message.info.dest,\n    sendMode,\n    seqno,\n    timeout: timeout ?? getFallbackTimeout(),\n    bounce: message.info.bounce,\n    amount: message.info.value.coins,\n    stateInit: message.init ?? undefined,\n    payload: await getPayload(network, message.info.dest, message.body, ledgerVersion, isBlindSigningEnabled, hints),\n    walletSpecifiers: getWalletSpecifiers(walletVersion, ledgerVersion, subwalletId),\n  };\n}\n\nfunction getMessageFromTonTransaction({ messages }: PreparedTransactionToSign) {\n  if (messages.length === 0) throw new Error('No messages');\n  if (messages.length > 1) throw new Error('Ledger doesn\\'t support signing more than 1 message');\n  return messages[0];\n}\n\nfunction getFallbackTimeout() {\n  return Math.floor(Date.now() / 1000 + TRANSFER_TIMEOUT_SEC);\n}\n\n/**\n * Like `tonPayloadToLedgerPayload`, but also performs long asynchronous operations such as fetching data for the\n * `knownJetton` field.\n */\nasync function getPayload(\n  network: ApiNetwork,\n  toAddress: Address,\n  tonPayload: Cell | undefined,\n  ledgerVersion: string,\n  isBlindSigningEnabled: boolean,\n  { tokenAddress }: TonTransferHints = {},\n) {\n  const ledgerPayload = tonPayloadToLedgerPayload(tonPayload, ledgerVersion);\n\n  if (ledgerPayload?.type === 'jetton-transfer' && doesSupport(ledgerVersion, VERSION_WITH_JETTON_ID)) {\n    if (!tokenAddress) {\n      const tokenWalletAddress = toBase64Address(toAddress, true, network);\n      tokenAddress = await resolveTokenAddress(network, tokenWalletAddress);\n    }\n\n    if (tokenAddress) {\n      ledgerPayload.knownJetton = getKnownJetton(tokenAddress);\n    }\n  }\n\n  if (ledgerPayload?.type === 'unsafe' && !isBlindSigningEnabled) {\n    throw lacksBlindSigningError;\n  }\n\n  return ledgerPayload;\n}\n\n/**\n * Converts a TON message body to the Ledger payload format. Doesn't populate the `knownJetton` field.\n *\n * Exported for tests only.\n */\nexport function tonPayloadToLedgerPayload(tonPayload: Cell | undefined, ledgerVersion: string) {\n  if (!tonPayload) {\n    return undefined;\n  }\n\n  let ledgerPayload: TonPayloadFormat | undefined;\n\n  try {\n    ledgerPayload = parseMessage(tonPayload, {\n      disallowModification: true,\n      disallowUnsafe: true, // Otherwise no error will be thrown, and we won't see why the payload can't be converted\n    });\n  } catch (err) {\n    logDebug('Unsafe Ledger payload', err);\n    ledgerPayload = {\n      type: 'unsafe',\n      message: tonPayload,\n    };\n  }\n\n  if (ledgerPayload && !doesSupport(ledgerVersion, VERSION_WITH_PAYLOAD[ledgerPayload.type])) {\n    logDebug(`The ${ledgerPayload.type} payload type is not supported by Ledger TON v${ledgerVersion}`);\n    if (!doesSupport(ledgerVersion, VERSION_WITH_PAYLOAD.unsafe)) {\n      throw unsupportedError;\n    }\n\n    logDebug('Falling back to an unsafe payload');\n    ledgerPayload = {\n      type: 'unsafe',\n      message: tonPayload,\n    };\n  }\n\n  return ledgerPayload;\n}\n\nasync function signLedgerTransactionsWithRetry(\n  accountPath: number[],\n  ledgerTransactions: LedgerTransactionParams[],\n  maxRetries: number,\n) {\n  const signedTransactions: Cell[] = [];\n  let retryCount = 0;\n  let index = 0;\n\n  while (index < ledgerTransactions.length) {\n    try {\n      signedTransactions.push(await ledgerTransport.signTransaction(accountPath, ledgerTransactions[index]));\n      index++;\n    } catch (err) {\n      try {\n        return handleLedgerError(err);\n      } catch {\n        if (retryCount >= maxRetries) {\n          throw err;\n        }\n        retryCount++;\n      }\n      logDebugError('signLedgerTransactionsWithRetry', err);\n    }\n  }\n\n  return signedTransactions;\n}\n\nfunction doesSupport(ledgerVersion: string, featureVersion: string) {\n  return compareVersions(ledgerVersion, featureVersion) >= 0;\n}\n\nfunction getKnownJetton(tokenAddress: string) {\n  const jettonId = knownJettonAddresses[tokenAddress];\n  // eslint-disable-next-line no-null/no-null\n  return jettonId === undefined ? null : { jettonId, workchain: WORKCHAIN };\n}\n\nfunction getWalletSpecifiers(walletVersion: ApiTonWalletVersion, ledgerVersion: string, subwalletId?: number) {\n  if (walletVersion === 'v3R2') {\n    if (!doesSupport(ledgerVersion, VERSION_WITH_WALLET_SPECIFIERS)) throw unsupportedError;\n    return { includeWalletOp: false };\n  }\n  if (subwalletId !== undefined) {\n    if (!doesSupport(ledgerVersion, VERSION_WITH_WALLET_SPECIFIERS)) throw unsupportedError;\n    return { subwalletId, includeWalletOp: false };\n  }\n  return undefined;\n}\n\n/** Throws unexpected errors (i.e. caused by mistakes in the app code), and returns expected */\nfunction handleLedgerError(error: unknown) {\n  if (error instanceof TransportStatusError) {\n    // Status code reference: https://github.com/LedgerHQ/app-ton/blob/d3e1edbbc1fcf9a5d6982fbb971f757a83d0aa56/src/sw.h\n    switch (error.statusCode) {\n      case 0x6985: return { error: ApiHardwareError.RejectedByUser };\n      case 0xbd00: return { error: ApiHardwareError.BlindSigningNotEnabled };\n      // The limits for Ton Connect proofs are: payload ≤ 128 bytes, domain ≤ 128 bytes, payload + domain ≤ 222 bytes\n      case 0xb00b: return { error: ApiHardwareError.ProofTooLarge };\n    }\n  }\n\n  throw error;\n}\n","export default function compareVersions(versionA: string, versionB: string): -1 | 0 | 1 {\n  const partsA = versionA.split('.').map(Number);\n  const partsB = versionB.split('.').map(Number);\n\n  for (let i = 0; i < Math.max(partsA.length, partsB.length); i++) {\n    const partA = partsA[i] || 0;\n    const partB = partsB[i] || 0;\n\n    if (partA > partB) return 1;\n    if (partA < partB) return -1;\n  }\n\n  return 0;\n}\n"],"names":["id","subscribers","LocalTracer","constructor","type","context","this","trace","message","data","obj","String","date","Date","log","i","length","e","console","error","dispatch","getContext","setContext","updateContext","contextToAdd","Object","assign","getType","setType","withType","withContext","withUpdatedContext","window","__ledgerLogsListen","cb","push","indexOf","pop","errorClasses","deserializers","addCustomErrorDeserializer","name","deserializer","createCustomErrorClass","CustomErrorClass","Error","fields","options","super","setPrototypeOf","prototype","k","cause","stack","TransportRaceCondition","HwTransportErrorType","TransportError","StatusCodes","ACCESS_CONDITION_NOT_FULFILLED","ALGORITHM_NOT_SUPPORTED","CLA_NOT_SUPPORTED","CODE_BLOCKED","CODE_NOT_INITIALIZED","COMMAND_INCOMPATIBLE_FILE_STRUCTURE","CONDITIONS_OF_USE_NOT_SATISFIED","CONTRADICTION_INVALIDATION","CONTRADICTION_SECRET_CODE_STATUS","DEVICE_IN_RECOVERY_MODE","CUSTOM_IMAGE_EMPTY","FILE_ALREADY_EXISTS","FILE_NOT_FOUND","GP_AUTH_FAILED","HALTED","INCONSISTENT_FILE","INCORRECT_DATA","INCORRECT_LENGTH","INCORRECT_P1_P2","INS_NOT_SUPPORTED","DEVICE_NOT_ONBOARDED","DEVICE_NOT_ONBOARDED_2","INVALID_KCV","INVALID_OFFSET","LICENSING","LOCKED_DEVICE","MAX_VALUE_REACHED","MEMORY_PROBLEM","MISSING_CRITICAL_PARAMETER","NO_EF_SELECTED","NOT_ENOUGH_MEMORY_SPACE","OK","PIN_REMAINING_ATTEMPTS","REFERENCED_DATA_NOT_FOUND","SECURITY_STATUS_NOT_SATISFIED","TECHNICAL_PROBLEM","UNKNOWN_APDU","USER_REFUSED_ON_DEVICE","NOT_ENOUGH_SPACE","APP_NOT_FOUND_OR_INVALID_CONTEXT","INVALID_APP_NAME_LENGTH","GEN_AES_KEY_FAILED","INTERNAL_CRYPTO_OPERATION_FAILED","INTERNAL_COMPUTE_AES_CMAC_FAILED","ENCRYPT_APP_STORAGE_FAILED","INVALID_BACKUP_STATE","PIN_NOT_SET","INVALID_BACKUP_LENGTH","INVALID_RESTORE_STATE","INVALID_CHUNK_LENGTH","INVALID_BACKUP_HEADER","TRUSTCHAIN_WRONG_SEED","TransportStatusError","statusCode","canBeMappedToChildError","statusText","keys","find","code","getAltStatusMessage","toString","LockedDeviceError","exports","TonTransport_1","defineProperty","enumerable","get","TonTransport","parseMessage","KNOWN_JETTONS","getLedgerAccountPathByWallet","network","wallet","workchain","index","isTestnet","arguments","undefined","WORKCHAIN","Workchain","MasterChain","getLedgerAccountPathByIndex","Set","serializationFormat","IS_AIR_APP","WindowTransport","Transport","exchange","apdu","response","callWindow","Buffer","from","VERSION_WITH_WALLET_SPECIFIERS","VERSION_WITH_JETTON_ID","VERSION_WITH_GET_SETTINGS","VERSION_WITH_PAYLOAD","unsafe","comment","knownJettonAddresses","fromEntries","map","_ref","jettonId","masterAddress","toBase64Address","ledgerTransport","unsupportedError","lacksBlindSigningError","async","signTonProofWithLedger","proof","accountPath","timestamp","domain","payload","getAddressProof","signature","err","handleLedgerError","signTonTransactionsWithLedger","tonTransactions","subwalletId","maxRetries","ATTEMPTS","ledgerVersion","getVersion","isBlindSigningEnabled","doesSupport","blindSigningEnabled","getSettings","getIsBlindSigningEnabled","ledgerTransactions","Promise","all","tonTransaction","walletVersion","authType","sendMode","seqno","timeout","hints","_ref2","messages","getMessageFromTonTransaction","info","to","dest","Math","floor","now","TRANSFER_TIMEOUT_SEC","bounce","amount","value","coins","stateInit","init","getPayload","body","walletSpecifiers","getWalletSpecifiers","tonTransactionToLedgerTransaction","version","ApiHardwareError","HardwareOutdated","BlindSigningNotEnabled","signedTransactions","retryCount","signTransaction","logDebugError","signLedgerTransactionsWithRetry","toAddress","tonPayload","tokenAddress","ledgerPayload","disallowModification","disallowUnsafe","logDebug","tonPayloadToLedgerPayload","tokenWalletAddress","resolveTokenAddress","knownJetton","getKnownJetton","featureVersion","versionA","versionB","partsA","split","Number","partsB","max","partA","partB","compareVersions","includeWalletOp","RejectedByUser","ProofTooLarge"],"sourceRoot":""}